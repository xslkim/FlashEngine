// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClipMeta.proto

#ifndef PROTOBUF_ClipMeta_2eproto__INCLUDED
#define PROTOBUF_ClipMeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClipMeta_2eproto();
void protobuf_AssignDesc_ClipMeta_2eproto();
void protobuf_ShutdownFile_ClipMeta_2eproto();

class ClipMetaData;
class ClipMeta;

// ===================================================================

class ClipMetaData : public ::google::protobuf::Message {
 public:
  ClipMetaData();
  virtual ~ClipMetaData();
  
  ClipMetaData(const ClipMetaData& from);
  
  inline ClipMetaData& operator=(const ClipMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClipMetaData& default_instance();
  
  void Swap(ClipMetaData* other);
  
  // implements Message ----------------------------------------------
  
  ClipMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClipMetaData& from);
  void MergeFrom(const ClipMetaData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 5 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required float x = 110;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 110;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 120;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 120;
  inline float y() const;
  inline void set_y(float value);
  
  // required float w = 130;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 130;
  inline float w() const;
  inline void set_w(float value);
  
  // required float h = 140;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 140;
  inline float h() const;
  inline void set_h(float value);
  
  // @@protoc_insertion_point(class_scope:ClipMetaData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  float x_;
  float y_;
  float w_;
  float h_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ClipMeta_2eproto();
  friend void protobuf_AssignDesc_ClipMeta_2eproto();
  friend void protobuf_ShutdownFile_ClipMeta_2eproto();
  
  void InitAsDefaultInstance();
  static ClipMetaData* default_instance_;
};
// -------------------------------------------------------------------

class ClipMeta : public ::google::protobuf::Message {
 public:
  ClipMeta();
  virtual ~ClipMeta();
  
  ClipMeta(const ClipMeta& from);
  
  inline ClipMeta& operator=(const ClipMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClipMeta& default_instance();
  
  void Swap(ClipMeta* other);
  
  // implements Message ----------------------------------------------
  
  ClipMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClipMeta& from);
  void MergeFrom(const ClipMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .ClipMetaData clips = 10;
  inline int clips_size() const;
  inline void clear_clips();
  static const int kClipsFieldNumber = 10;
  inline const ::ClipMetaData& clips(int index) const;
  inline ::ClipMetaData* mutable_clips(int index);
  inline ::ClipMetaData* add_clips();
  inline const ::google::protobuf::RepeatedPtrField< ::ClipMetaData >&
      clips() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClipMetaData >*
      mutable_clips();
  
  // @@protoc_insertion_point(class_scope:ClipMeta)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::ClipMetaData > clips_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ClipMeta_2eproto();
  friend void protobuf_AssignDesc_ClipMeta_2eproto();
  friend void protobuf_ShutdownFile_ClipMeta_2eproto();
  
  void InitAsDefaultInstance();
  static ClipMeta* default_instance_;
};
// ===================================================================


// ===================================================================

// ClipMetaData

// required string name = 5 [default = ""];
inline bool ClipMetaData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClipMetaData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClipMetaData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClipMetaData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClipMetaData::name() const {
  return *name_;
}
inline void ClipMetaData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClipMetaData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClipMetaData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClipMetaData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClipMetaData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float x = 110;
inline bool ClipMetaData::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClipMetaData::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClipMetaData::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClipMetaData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ClipMetaData::x() const {
  return x_;
}
inline void ClipMetaData::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 120;
inline bool ClipMetaData::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClipMetaData::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClipMetaData::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClipMetaData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ClipMetaData::y() const {
  return y_;
}
inline void ClipMetaData::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float w = 130;
inline bool ClipMetaData::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClipMetaData::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClipMetaData::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClipMetaData::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float ClipMetaData::w() const {
  return w_;
}
inline void ClipMetaData::set_w(float value) {
  set_has_w();
  w_ = value;
}

// required float h = 140;
inline bool ClipMetaData::has_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClipMetaData::set_has_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClipMetaData::clear_has_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClipMetaData::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline float ClipMetaData::h() const {
  return h_;
}
inline void ClipMetaData::set_h(float value) {
  set_has_h();
  h_ = value;
}

// -------------------------------------------------------------------

// ClipMeta

// required string name = 5;
inline bool ClipMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClipMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClipMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClipMeta::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClipMeta::name() const {
  return *name_;
}
inline void ClipMeta::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClipMeta::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClipMeta::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClipMeta::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClipMeta::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ClipMetaData clips = 10;
inline int ClipMeta::clips_size() const {
  return clips_.size();
}
inline void ClipMeta::clear_clips() {
  clips_.Clear();
}
inline const ::ClipMetaData& ClipMeta::clips(int index) const {
  return clips_.Get(index);
}
inline ::ClipMetaData* ClipMeta::mutable_clips(int index) {
  return clips_.Mutable(index);
}
inline ::ClipMetaData* ClipMeta::add_clips() {
  return clips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClipMetaData >&
ClipMeta::clips() const {
  return clips_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClipMetaData >*
ClipMeta::mutable_clips() {
  return &clips_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClipMeta_2eproto__INCLUDED
