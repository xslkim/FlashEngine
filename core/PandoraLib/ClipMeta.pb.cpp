// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClipMeta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ClipMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClipMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClipMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClipMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClipMeta_2eproto() {
  protobuf_AddDesc_ClipMeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClipMeta.proto");
  GOOGLE_CHECK(file != NULL);
  ClipMetaData_descriptor_ = file->message_type(0);
  static const int ClipMetaData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMetaData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMetaData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMetaData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMetaData, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMetaData, h_),
  };
  ClipMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClipMetaData_descriptor_,
      ClipMetaData::default_instance_,
      ClipMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClipMetaData));
  ClipMeta_descriptor_ = file->message_type(1);
  static const int ClipMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMeta, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMeta, clips_),
  };
  ClipMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClipMeta_descriptor_,
      ClipMeta::default_instance_,
      ClipMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClipMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClipMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClipMeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClipMetaData_descriptor_, &ClipMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClipMeta_descriptor_, &ClipMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClipMeta_2eproto() {
  delete ClipMetaData::default_instance_;
  delete ClipMetaData_reflection_;
  delete ClipMeta::default_instance_;
  delete ClipMeta_reflection_;
}

void protobuf_AddDesc_ClipMeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ClipMeta.proto\"L\n\014ClipMetaData\022\016\n\004name"
    "\030\005 \002(\t:\000\022\t\n\001x\030n \002(\002\022\t\n\001y\030x \002(\002\022\n\n\001w\030\202\001 \002"
    "(\002\022\n\n\001h\030\214\001 \002(\002\"6\n\010ClipMeta\022\014\n\004name\030\005 \002(\t"
    "\022\034\n\005clips\030\n \003(\0132\r.ClipMetaData", 150);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClipMeta.proto", &protobuf_RegisterTypes);
  ClipMetaData::default_instance_ = new ClipMetaData();
  ClipMeta::default_instance_ = new ClipMeta();
  ClipMetaData::default_instance_->InitAsDefaultInstance();
  ClipMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClipMeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClipMeta_2eproto {
  StaticDescriptorInitializer_ClipMeta_2eproto() {
    protobuf_AddDesc_ClipMeta_2eproto();
  }
} static_descriptor_initializer_ClipMeta_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ClipMetaData::kNameFieldNumber;
const int ClipMetaData::kXFieldNumber;
const int ClipMetaData::kYFieldNumber;
const int ClipMetaData::kWFieldNumber;
const int ClipMetaData::kHFieldNumber;
#endif  // !_MSC_VER

ClipMetaData::ClipMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClipMetaData::InitAsDefaultInstance() {
}

ClipMetaData::ClipMetaData(const ClipMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClipMetaData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipMetaData::~ClipMetaData() {
  SharedDtor();
}

void ClipMetaData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClipMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClipMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClipMetaData_descriptor_;
}

const ClipMetaData& ClipMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClipMeta_2eproto();  return *default_instance_;
}

ClipMetaData* ClipMetaData::default_instance_ = NULL;

ClipMetaData* ClipMetaData::New() const {
  return new ClipMetaData;
}

void ClipMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    w_ = 0;
    h_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClipMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(885)) goto parse_x;
        break;
      }
      
      // required float x = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(965)) goto parse_y;
        break;
      }
      
      // required float y = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1045)) goto parse_w;
        break;
      }
      
      // required float w = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1125)) goto parse_h;
        break;
      }
      
      // required float h = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // required float x = 110;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->x(), output);
  }
  
  // required float y = 120;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(120, this->y(), output);
  }
  
  // required float w = 130;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(130, this->w(), output);
  }
  
  // required float h = 140;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(140, this->h(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClipMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // required float x = 110;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->x(), target);
  }
  
  // required float y = 120;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(120, this->y(), target);
  }
  
  // required float w = 130;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(130, this->w(), target);
  }
  
  // required float h = 140;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(140, this->h(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClipMetaData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 5 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float x = 110;
    if (has_x()) {
      total_size += 2 + 4;
    }
    
    // required float y = 120;
    if (has_y()) {
      total_size += 2 + 4;
    }
    
    // required float w = 130;
    if (has_w()) {
      total_size += 2 + 4;
    }
    
    // required float h = 140;
    if (has_h()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClipMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClipMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClipMetaData::MergeFrom(const ClipMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClipMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipMetaData::CopyFrom(const ClipMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ClipMetaData::Swap(ClipMetaData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClipMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClipMetaData_descriptor_;
  metadata.reflection = ClipMetaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClipMeta::kNameFieldNumber;
const int ClipMeta::kClipsFieldNumber;
#endif  // !_MSC_VER

ClipMeta::ClipMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClipMeta::InitAsDefaultInstance() {
}

ClipMeta::ClipMeta(const ClipMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClipMeta::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClipMeta::~ClipMeta() {
  SharedDtor();
}

void ClipMeta::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClipMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClipMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClipMeta_descriptor_;
}

const ClipMeta& ClipMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClipMeta_2eproto();  return *default_instance_;
}

ClipMeta* ClipMeta::default_instance_ = NULL;

ClipMeta* ClipMeta::New() const {
  return new ClipMeta;
}

void ClipMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  clips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClipMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_clips;
        break;
      }
      
      // repeated .ClipMetaData clips = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_clips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClipMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // repeated .ClipMetaData clips = 10;
  for (int i = 0; i < this->clips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->clips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClipMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // repeated .ClipMetaData clips = 10;
  for (int i = 0; i < this->clips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->clips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClipMeta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .ClipMetaData clips = 10;
  total_size += 1 * this->clips_size();
  for (int i = 0; i < this->clips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClipMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClipMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClipMeta::MergeFrom(const ClipMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  clips_.MergeFrom(from.clips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClipMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipMeta::CopyFrom(const ClipMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < clips_size(); i++) {
    if (!this->clips(i).IsInitialized()) return false;
  }
  return true;
}

void ClipMeta::Swap(ClipMeta* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    clips_.Swap(&other->clips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClipMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClipMeta_descriptor_;
  metadata.reflection = ClipMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
