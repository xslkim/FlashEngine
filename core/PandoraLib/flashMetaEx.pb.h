// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flashMetaEx.proto

#ifndef PROTOBUF_flashMetaEx_2eproto__INCLUDED
#define PROTOBUF_flashMetaEx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "flashMeta.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_flashMetaEx_2eproto();
void protobuf_AssignDesc_flashMetaEx_2eproto();
void protobuf_ShutdownFile_flashMetaEx_2eproto();

class FlashMetaMatrixEx;
class FlashMetaDataEx;
class FlashMetaFrameEx;
class FlashMetaLayerEx;
class FlashMetaSymbolEx;
class FlashMetaEx;

// ===================================================================

class FlashMetaMatrixEx : public ::google::protobuf::Message {
 public:
  FlashMetaMatrixEx();
  virtual ~FlashMetaMatrixEx();
  
  FlashMetaMatrixEx(const FlashMetaMatrixEx& from);
  
  inline FlashMetaMatrixEx& operator=(const FlashMetaMatrixEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaMatrixEx& default_instance();
  
  void Swap(FlashMetaMatrixEx* other);
  
  // implements Message ----------------------------------------------
  
  FlashMetaMatrixEx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaMatrixEx& from);
  void MergeFrom(const FlashMetaMatrixEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float ma = 110;
  inline bool has_ma() const;
  inline void clear_ma();
  static const int kMaFieldNumber = 110;
  inline float ma() const;
  inline void set_ma(float value);
  
  // optional float mb = 120;
  inline bool has_mb() const;
  inline void clear_mb();
  static const int kMbFieldNumber = 120;
  inline float mb() const;
  inline void set_mb(float value);
  
  // optional float mc = 130;
  inline bool has_mc() const;
  inline void clear_mc();
  static const int kMcFieldNumber = 130;
  inline float mc() const;
  inline void set_mc(float value);
  
  // optional float md = 140;
  inline bool has_md() const;
  inline void clear_md();
  static const int kMdFieldNumber = 140;
  inline float md() const;
  inline void set_md(float value);
  
  // optional float a = 170;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 170;
  inline float a() const;
  inline void set_a(float value);
  
  // optional float r = 180;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 180;
  inline float r() const;
  inline void set_r(float value);
  
  // optional float g = 190;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 190;
  inline float g() const;
  inline void set_g(float value);
  
  // optional float b = 200;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 200;
  inline float b() const;
  inline void set_b(float value);
  
  // optional bool playOnce = 210;
  inline bool has_playonce() const;
  inline void clear_playonce();
  static const int kPlayOnceFieldNumber = 210;
  inline bool playonce() const;
  inline void set_playonce(bool value);
  
  // optional bool singleFrame = 220;
  inline bool has_singleframe() const;
  inline void clear_singleframe();
  static const int kSingleFrameFieldNumber = 220;
  inline bool singleframe() const;
  inline void set_singleframe(bool value);
  
  // optional int32 width = 50;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 50;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional int32 height = 60;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 60;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:FlashMetaMatrixEx)
 private:
  inline void set_has_ma();
  inline void clear_has_ma();
  inline void set_has_mb();
  inline void clear_has_mb();
  inline void set_has_mc();
  inline void clear_has_mc();
  inline void set_has_md();
  inline void clear_has_md();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_playonce();
  inline void clear_has_playonce();
  inline void set_has_singleframe();
  inline void clear_has_singleframe();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float ma_;
  float mb_;
  float mc_;
  float md_;
  float a_;
  float r_;
  float g_;
  float b_;
  bool playonce_;
  bool singleframe_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_flashMetaEx_2eproto();
  friend void protobuf_AssignDesc_flashMetaEx_2eproto();
  friend void protobuf_ShutdownFile_flashMetaEx_2eproto();
  
  void InitAsDefaultInstance();
  static FlashMetaMatrixEx* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaDataEx : public ::google::protobuf::Message {
 public:
  FlashMetaDataEx();
  virtual ~FlashMetaDataEx();
  
  FlashMetaDataEx(const FlashMetaDataEx& from);
  
  inline FlashMetaDataEx& operator=(const FlashMetaDataEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaDataEx& default_instance();
  
  void Swap(FlashMetaDataEx* other);
  
  // implements Message ----------------------------------------------
  
  FlashMetaDataEx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaDataEx& from);
  void MergeFrom(const FlashMetaDataEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 matrix_name = 5;
  inline bool has_matrix_name() const;
  inline void clear_matrix_name();
  static const int kMatrixNameFieldNumber = 5;
  inline ::google::protobuf::uint32 matrix_name() const;
  inline void set_matrix_name(::google::protobuf::uint32 value);
  
  // optional .FlashMetaMatrixEx tempMatrix = 21;
  inline bool has_tempmatrix() const;
  inline void clear_tempmatrix();
  static const int kTempMatrixFieldNumber = 21;
  inline const ::FlashMetaMatrixEx& tempmatrix() const;
  inline ::FlashMetaMatrixEx* mutable_tempmatrix();
  inline ::FlashMetaMatrixEx* release_tempmatrix();
  
  // optional float tx = 60;
  inline bool has_tx() const;
  inline void clear_tx();
  static const int kTxFieldNumber = 60;
  inline float tx() const;
  inline void set_tx(float value);
  
  // optional float ty = 65;
  inline bool has_ty() const;
  inline void clear_ty();
  static const int kTyFieldNumber = 65;
  inline float ty() const;
  inline void set_ty(float value);
  
  // optional int32 insNameId = 170;
  inline bool has_insnameid() const;
  inline void clear_insnameid();
  static const int kInsNameIdFieldNumber = 170;
  inline ::google::protobuf::int32 insnameid() const;
  inline void set_insnameid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:FlashMetaDataEx)
 private:
  inline void set_has_matrix_name();
  inline void clear_has_matrix_name();
  inline void set_has_tempmatrix();
  inline void clear_has_tempmatrix();
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_ty();
  inline void clear_has_ty();
  inline void set_has_insnameid();
  inline void clear_has_insnameid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::FlashMetaMatrixEx* tempmatrix_;
  ::google::protobuf::uint32 matrix_name_;
  float tx_;
  float ty_;
  ::google::protobuf::int32 insnameid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_flashMetaEx_2eproto();
  friend void protobuf_AssignDesc_flashMetaEx_2eproto();
  friend void protobuf_ShutdownFile_flashMetaEx_2eproto();
  
  void InitAsDefaultInstance();
  static FlashMetaDataEx* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaFrameEx : public ::google::protobuf::Message {
 public:
  FlashMetaFrameEx();
  virtual ~FlashMetaFrameEx();
  
  FlashMetaFrameEx(const FlashMetaFrameEx& from);
  
  inline FlashMetaFrameEx& operator=(const FlashMetaFrameEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaFrameEx& default_instance();
  
  void Swap(FlashMetaFrameEx* other);
  
  // implements Message ----------------------------------------------
  
  FlashMetaFrameEx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaFrameEx& from);
  void MergeFrom(const FlashMetaFrameEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 startFrame = 10;
  inline bool has_startframe() const;
  inline void clear_startframe();
  static const int kStartFrameFieldNumber = 10;
  inline ::google::protobuf::int32 startframe() const;
  inline void set_startframe(::google::protobuf::int32 value);
  
  // repeated .FlashMetaDataEx bitMaps = 20;
  inline int bitmaps_size() const;
  inline void clear_bitmaps();
  static const int kBitMapsFieldNumber = 20;
  inline const ::FlashMetaDataEx& bitmaps(int index) const;
  inline ::FlashMetaDataEx* mutable_bitmaps(int index);
  inline ::FlashMetaDataEx* add_bitmaps();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >&
      bitmaps() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >*
      mutable_bitmaps();
  
  // repeated .FlashMetaDataEx symbols = 30;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 30;
  inline const ::FlashMetaDataEx& symbols(int index) const;
  inline ::FlashMetaDataEx* mutable_symbols(int index);
  inline ::FlashMetaDataEx* add_symbols();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >&
      symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >*
      mutable_symbols();
  
  // @@protoc_insertion_point(class_scope:FlashMetaFrameEx)
 private:
  inline void set_has_startframe();
  inline void clear_has_startframe();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx > bitmaps_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx > symbols_;
  ::google::protobuf::int32 startframe_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_flashMetaEx_2eproto();
  friend void protobuf_AssignDesc_flashMetaEx_2eproto();
  friend void protobuf_ShutdownFile_flashMetaEx_2eproto();
  
  void InitAsDefaultInstance();
  static FlashMetaFrameEx* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaLayerEx : public ::google::protobuf::Message {
 public:
  FlashMetaLayerEx();
  virtual ~FlashMetaLayerEx();
  
  FlashMetaLayerEx(const FlashMetaLayerEx& from);
  
  inline FlashMetaLayerEx& operator=(const FlashMetaLayerEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaLayerEx& default_instance();
  
  void Swap(FlashMetaLayerEx* other);
  
  // implements Message ----------------------------------------------
  
  FlashMetaLayerEx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaLayerEx& from);
  void MergeFrom(const FlashMetaLayerEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .FlashMetaFrameEx frames = 5;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 5;
  inline const ::FlashMetaFrameEx& frames(int index) const;
  inline ::FlashMetaFrameEx* mutable_frames(int index);
  inline ::FlashMetaFrameEx* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaFrameEx >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaFrameEx >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:FlashMetaLayerEx)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::FlashMetaFrameEx > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_flashMetaEx_2eproto();
  friend void protobuf_AssignDesc_flashMetaEx_2eproto();
  friend void protobuf_ShutdownFile_flashMetaEx_2eproto();
  
  void InitAsDefaultInstance();
  static FlashMetaLayerEx* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaSymbolEx : public ::google::protobuf::Message {
 public:
  FlashMetaSymbolEx();
  virtual ~FlashMetaSymbolEx();
  
  FlashMetaSymbolEx(const FlashMetaSymbolEx& from);
  
  inline FlashMetaSymbolEx& operator=(const FlashMetaSymbolEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaSymbolEx& default_instance();
  
  void Swap(FlashMetaSymbolEx* other);
  
  // implements Message ----------------------------------------------
  
  FlashMetaSymbolEx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaSymbolEx& from);
  void MergeFrom(const FlashMetaSymbolEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 max_frame = 7;
  inline bool has_max_frame() const;
  inline void clear_max_frame();
  static const int kMaxFrameFieldNumber = 7;
  inline ::google::protobuf::int32 max_frame() const;
  inline void set_max_frame(::google::protobuf::int32 value);
  
  // repeated .FlashMetaLayerEx layers = 10;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 10;
  inline const ::FlashMetaLayerEx& layers(int index) const;
  inline ::FlashMetaLayerEx* mutable_layers(int index);
  inline ::FlashMetaLayerEx* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaLayerEx >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaLayerEx >*
      mutable_layers();
  
  // @@protoc_insertion_point(class_scope:FlashMetaSymbolEx)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_max_frame();
  inline void clear_has_max_frame();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaLayerEx > layers_;
  ::google::protobuf::int32 max_frame_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_flashMetaEx_2eproto();
  friend void protobuf_AssignDesc_flashMetaEx_2eproto();
  friend void protobuf_ShutdownFile_flashMetaEx_2eproto();
  
  void InitAsDefaultInstance();
  static FlashMetaSymbolEx* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaEx : public ::google::protobuf::Message {
 public:
  FlashMetaEx();
  virtual ~FlashMetaEx();
  
  FlashMetaEx(const FlashMetaEx& from);
  
  inline FlashMetaEx& operator=(const FlashMetaEx& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaEx& default_instance();
  
  void Swap(FlashMetaEx* other);
  
  // implements Message ----------------------------------------------
  
  FlashMetaEx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaEx& from);
  void MergeFrom(const FlashMetaEx& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string spriteName = 5;
  inline bool has_spritename() const;
  inline void clear_spritename();
  static const int kSpriteNameFieldNumber = 5;
  inline const ::std::string& spritename() const;
  inline void set_spritename(const ::std::string& value);
  inline void set_spritename(const char* value);
  inline void set_spritename(const char* value, size_t size);
  inline ::std::string* mutable_spritename();
  inline ::std::string* release_spritename();
  
  // repeated .FlashMetaSymbolEx symbols = 10;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 10;
  inline const ::FlashMetaSymbolEx& symbols(int index) const;
  inline ::FlashMetaSymbolEx* mutable_symbols(int index);
  inline ::FlashMetaSymbolEx* add_symbols();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbolEx >&
      symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbolEx >*
      mutable_symbols();
  
  // repeated .FlashMetaDataEx anims = 20;
  inline int anims_size() const;
  inline void clear_anims();
  static const int kAnimsFieldNumber = 20;
  inline const ::FlashMetaDataEx& anims(int index) const;
  inline ::FlashMetaDataEx* mutable_anims(int index);
  inline ::FlashMetaDataEx* add_anims();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >&
      anims() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >*
      mutable_anims();
  
  // repeated string bitMapNames = 25;
  inline int bitmapnames_size() const;
  inline void clear_bitmapnames();
  static const int kBitMapNamesFieldNumber = 25;
  inline const ::std::string& bitmapnames(int index) const;
  inline ::std::string* mutable_bitmapnames(int index);
  inline void set_bitmapnames(int index, const ::std::string& value);
  inline void set_bitmapnames(int index, const char* value);
  inline void set_bitmapnames(int index, const char* value, size_t size);
  inline ::std::string* add_bitmapnames();
  inline void add_bitmapnames(const ::std::string& value);
  inline void add_bitmapnames(const char* value);
  inline void add_bitmapnames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bitmapnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bitmapnames();
  
  // required int32 speed = 30;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 30;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);
  
  // optional int32 screenHeight = 40;
  inline bool has_screenheight() const;
  inline void clear_screenheight();
  static const int kScreenHeightFieldNumber = 40;
  inline ::google::protobuf::int32 screenheight() const;
  inline void set_screenheight(::google::protobuf::int32 value);
  
  // repeated .FlashMetaMatrixEx matrixPool = 50;
  inline int matrixpool_size() const;
  inline void clear_matrixpool();
  static const int kMatrixPoolFieldNumber = 50;
  inline const ::FlashMetaMatrixEx& matrixpool(int index) const;
  inline ::FlashMetaMatrixEx* mutable_matrixpool(int index);
  inline ::FlashMetaMatrixEx* add_matrixpool();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaMatrixEx >&
      matrixpool() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaMatrixEx >*
      mutable_matrixpool();
  
  // repeated string namePool = 60;
  inline int namepool_size() const;
  inline void clear_namepool();
  static const int kNamePoolFieldNumber = 60;
  inline const ::std::string& namepool(int index) const;
  inline ::std::string* mutable_namepool(int index);
  inline void set_namepool(int index, const ::std::string& value);
  inline void set_namepool(int index, const char* value);
  inline void set_namepool(int index, const char* value, size_t size);
  inline ::std::string* add_namepool();
  inline void add_namepool(const ::std::string& value);
  inline void add_namepool(const char* value);
  inline void add_namepool(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& namepool() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_namepool();
  
  // @@protoc_insertion_point(class_scope:FlashMetaEx)
 private:
  inline void set_has_spritename();
  inline void clear_has_spritename();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_screenheight();
  inline void clear_has_screenheight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* spritename_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbolEx > symbols_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx > anims_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bitmapnames_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 screenheight_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaMatrixEx > matrixpool_;
  ::google::protobuf::RepeatedPtrField< ::std::string> namepool_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_flashMetaEx_2eproto();
  friend void protobuf_AssignDesc_flashMetaEx_2eproto();
  friend void protobuf_ShutdownFile_flashMetaEx_2eproto();
  
  void InitAsDefaultInstance();
  static FlashMetaEx* default_instance_;
};
// ===================================================================


// ===================================================================

// FlashMetaMatrixEx

// optional float ma = 110;
inline bool FlashMetaMatrixEx::has_ma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaMatrixEx::set_has_ma() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaMatrixEx::clear_has_ma() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaMatrixEx::clear_ma() {
  ma_ = 0;
  clear_has_ma();
}
inline float FlashMetaMatrixEx::ma() const {
  return ma_;
}
inline void FlashMetaMatrixEx::set_ma(float value) {
  set_has_ma();
  ma_ = value;
}

// optional float mb = 120;
inline bool FlashMetaMatrixEx::has_mb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlashMetaMatrixEx::set_has_mb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlashMetaMatrixEx::clear_has_mb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlashMetaMatrixEx::clear_mb() {
  mb_ = 0;
  clear_has_mb();
}
inline float FlashMetaMatrixEx::mb() const {
  return mb_;
}
inline void FlashMetaMatrixEx::set_mb(float value) {
  set_has_mb();
  mb_ = value;
}

// optional float mc = 130;
inline bool FlashMetaMatrixEx::has_mc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlashMetaMatrixEx::set_has_mc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlashMetaMatrixEx::clear_has_mc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlashMetaMatrixEx::clear_mc() {
  mc_ = 0;
  clear_has_mc();
}
inline float FlashMetaMatrixEx::mc() const {
  return mc_;
}
inline void FlashMetaMatrixEx::set_mc(float value) {
  set_has_mc();
  mc_ = value;
}

// optional float md = 140;
inline bool FlashMetaMatrixEx::has_md() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlashMetaMatrixEx::set_has_md() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlashMetaMatrixEx::clear_has_md() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlashMetaMatrixEx::clear_md() {
  md_ = 0;
  clear_has_md();
}
inline float FlashMetaMatrixEx::md() const {
  return md_;
}
inline void FlashMetaMatrixEx::set_md(float value) {
  set_has_md();
  md_ = value;
}

// optional float a = 170;
inline bool FlashMetaMatrixEx::has_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlashMetaMatrixEx::set_has_a() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlashMetaMatrixEx::clear_has_a() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlashMetaMatrixEx::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float FlashMetaMatrixEx::a() const {
  return a_;
}
inline void FlashMetaMatrixEx::set_a(float value) {
  set_has_a();
  a_ = value;
}

// optional float r = 180;
inline bool FlashMetaMatrixEx::has_r() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FlashMetaMatrixEx::set_has_r() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FlashMetaMatrixEx::clear_has_r() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FlashMetaMatrixEx::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float FlashMetaMatrixEx::r() const {
  return r_;
}
inline void FlashMetaMatrixEx::set_r(float value) {
  set_has_r();
  r_ = value;
}

// optional float g = 190;
inline bool FlashMetaMatrixEx::has_g() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FlashMetaMatrixEx::set_has_g() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FlashMetaMatrixEx::clear_has_g() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FlashMetaMatrixEx::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float FlashMetaMatrixEx::g() const {
  return g_;
}
inline void FlashMetaMatrixEx::set_g(float value) {
  set_has_g();
  g_ = value;
}

// optional float b = 200;
inline bool FlashMetaMatrixEx::has_b() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FlashMetaMatrixEx::set_has_b() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FlashMetaMatrixEx::clear_has_b() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FlashMetaMatrixEx::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float FlashMetaMatrixEx::b() const {
  return b_;
}
inline void FlashMetaMatrixEx::set_b(float value) {
  set_has_b();
  b_ = value;
}

// optional bool playOnce = 210;
inline bool FlashMetaMatrixEx::has_playonce() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FlashMetaMatrixEx::set_has_playonce() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FlashMetaMatrixEx::clear_has_playonce() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FlashMetaMatrixEx::clear_playonce() {
  playonce_ = false;
  clear_has_playonce();
}
inline bool FlashMetaMatrixEx::playonce() const {
  return playonce_;
}
inline void FlashMetaMatrixEx::set_playonce(bool value) {
  set_has_playonce();
  playonce_ = value;
}

// optional bool singleFrame = 220;
inline bool FlashMetaMatrixEx::has_singleframe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FlashMetaMatrixEx::set_has_singleframe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FlashMetaMatrixEx::clear_has_singleframe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FlashMetaMatrixEx::clear_singleframe() {
  singleframe_ = false;
  clear_has_singleframe();
}
inline bool FlashMetaMatrixEx::singleframe() const {
  return singleframe_;
}
inline void FlashMetaMatrixEx::set_singleframe(bool value) {
  set_has_singleframe();
  singleframe_ = value;
}

// optional int32 width = 50;
inline bool FlashMetaMatrixEx::has_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FlashMetaMatrixEx::set_has_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FlashMetaMatrixEx::clear_has_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FlashMetaMatrixEx::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 FlashMetaMatrixEx::width() const {
  return width_;
}
inline void FlashMetaMatrixEx::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 60;
inline bool FlashMetaMatrixEx::has_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FlashMetaMatrixEx::set_has_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FlashMetaMatrixEx::clear_has_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FlashMetaMatrixEx::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 FlashMetaMatrixEx::height() const {
  return height_;
}
inline void FlashMetaMatrixEx::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// FlashMetaDataEx

// required uint32 matrix_name = 5;
inline bool FlashMetaDataEx::has_matrix_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaDataEx::set_has_matrix_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaDataEx::clear_has_matrix_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaDataEx::clear_matrix_name() {
  matrix_name_ = 0u;
  clear_has_matrix_name();
}
inline ::google::protobuf::uint32 FlashMetaDataEx::matrix_name() const {
  return matrix_name_;
}
inline void FlashMetaDataEx::set_matrix_name(::google::protobuf::uint32 value) {
  set_has_matrix_name();
  matrix_name_ = value;
}

// optional .FlashMetaMatrixEx tempMatrix = 21;
inline bool FlashMetaDataEx::has_tempmatrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlashMetaDataEx::set_has_tempmatrix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlashMetaDataEx::clear_has_tempmatrix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlashMetaDataEx::clear_tempmatrix() {
  if (tempmatrix_ != NULL) tempmatrix_->::FlashMetaMatrixEx::Clear();
  clear_has_tempmatrix();
}
inline const ::FlashMetaMatrixEx& FlashMetaDataEx::tempmatrix() const {
  return tempmatrix_ != NULL ? *tempmatrix_ : *default_instance_->tempmatrix_;
}
inline ::FlashMetaMatrixEx* FlashMetaDataEx::mutable_tempmatrix() {
  set_has_tempmatrix();
  if (tempmatrix_ == NULL) tempmatrix_ = new ::FlashMetaMatrixEx;
  return tempmatrix_;
}
inline ::FlashMetaMatrixEx* FlashMetaDataEx::release_tempmatrix() {
  clear_has_tempmatrix();
  ::FlashMetaMatrixEx* temp = tempmatrix_;
  tempmatrix_ = NULL;
  return temp;
}

// optional float tx = 60;
inline bool FlashMetaDataEx::has_tx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlashMetaDataEx::set_has_tx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlashMetaDataEx::clear_has_tx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlashMetaDataEx::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
inline float FlashMetaDataEx::tx() const {
  return tx_;
}
inline void FlashMetaDataEx::set_tx(float value) {
  set_has_tx();
  tx_ = value;
}

// optional float ty = 65;
inline bool FlashMetaDataEx::has_ty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlashMetaDataEx::set_has_ty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlashMetaDataEx::clear_has_ty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlashMetaDataEx::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
inline float FlashMetaDataEx::ty() const {
  return ty_;
}
inline void FlashMetaDataEx::set_ty(float value) {
  set_has_ty();
  ty_ = value;
}

// optional int32 insNameId = 170;
inline bool FlashMetaDataEx::has_insnameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlashMetaDataEx::set_has_insnameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlashMetaDataEx::clear_has_insnameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlashMetaDataEx::clear_insnameid() {
  insnameid_ = 0;
  clear_has_insnameid();
}
inline ::google::protobuf::int32 FlashMetaDataEx::insnameid() const {
  return insnameid_;
}
inline void FlashMetaDataEx::set_insnameid(::google::protobuf::int32 value) {
  set_has_insnameid();
  insnameid_ = value;
}

// -------------------------------------------------------------------

// FlashMetaFrameEx

// optional int32 startFrame = 10;
inline bool FlashMetaFrameEx::has_startframe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaFrameEx::set_has_startframe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaFrameEx::clear_has_startframe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaFrameEx::clear_startframe() {
  startframe_ = 0;
  clear_has_startframe();
}
inline ::google::protobuf::int32 FlashMetaFrameEx::startframe() const {
  return startframe_;
}
inline void FlashMetaFrameEx::set_startframe(::google::protobuf::int32 value) {
  set_has_startframe();
  startframe_ = value;
}

// repeated .FlashMetaDataEx bitMaps = 20;
inline int FlashMetaFrameEx::bitmaps_size() const {
  return bitmaps_.size();
}
inline void FlashMetaFrameEx::clear_bitmaps() {
  bitmaps_.Clear();
}
inline const ::FlashMetaDataEx& FlashMetaFrameEx::bitmaps(int index) const {
  return bitmaps_.Get(index);
}
inline ::FlashMetaDataEx* FlashMetaFrameEx::mutable_bitmaps(int index) {
  return bitmaps_.Mutable(index);
}
inline ::FlashMetaDataEx* FlashMetaFrameEx::add_bitmaps() {
  return bitmaps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >&
FlashMetaFrameEx::bitmaps() const {
  return bitmaps_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >*
FlashMetaFrameEx::mutable_bitmaps() {
  return &bitmaps_;
}

// repeated .FlashMetaDataEx symbols = 30;
inline int FlashMetaFrameEx::symbols_size() const {
  return symbols_.size();
}
inline void FlashMetaFrameEx::clear_symbols() {
  symbols_.Clear();
}
inline const ::FlashMetaDataEx& FlashMetaFrameEx::symbols(int index) const {
  return symbols_.Get(index);
}
inline ::FlashMetaDataEx* FlashMetaFrameEx::mutable_symbols(int index) {
  return symbols_.Mutable(index);
}
inline ::FlashMetaDataEx* FlashMetaFrameEx::add_symbols() {
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >&
FlashMetaFrameEx::symbols() const {
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >*
FlashMetaFrameEx::mutable_symbols() {
  return &symbols_;
}

// -------------------------------------------------------------------

// FlashMetaLayerEx

// repeated .FlashMetaFrameEx frames = 5;
inline int FlashMetaLayerEx::frames_size() const {
  return frames_.size();
}
inline void FlashMetaLayerEx::clear_frames() {
  frames_.Clear();
}
inline const ::FlashMetaFrameEx& FlashMetaLayerEx::frames(int index) const {
  return frames_.Get(index);
}
inline ::FlashMetaFrameEx* FlashMetaLayerEx::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::FlashMetaFrameEx* FlashMetaLayerEx::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaFrameEx >&
FlashMetaLayerEx::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaFrameEx >*
FlashMetaLayerEx::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// FlashMetaSymbolEx

// required string name = 5;
inline bool FlashMetaSymbolEx::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaSymbolEx::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaSymbolEx::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaSymbolEx::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FlashMetaSymbolEx::name() const {
  return *name_;
}
inline void FlashMetaSymbolEx::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlashMetaSymbolEx::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlashMetaSymbolEx::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMetaSymbolEx::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FlashMetaSymbolEx::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 max_frame = 7;
inline bool FlashMetaSymbolEx::has_max_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlashMetaSymbolEx::set_has_max_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlashMetaSymbolEx::clear_has_max_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlashMetaSymbolEx::clear_max_frame() {
  max_frame_ = 0;
  clear_has_max_frame();
}
inline ::google::protobuf::int32 FlashMetaSymbolEx::max_frame() const {
  return max_frame_;
}
inline void FlashMetaSymbolEx::set_max_frame(::google::protobuf::int32 value) {
  set_has_max_frame();
  max_frame_ = value;
}

// repeated .FlashMetaLayerEx layers = 10;
inline int FlashMetaSymbolEx::layers_size() const {
  return layers_.size();
}
inline void FlashMetaSymbolEx::clear_layers() {
  layers_.Clear();
}
inline const ::FlashMetaLayerEx& FlashMetaSymbolEx::layers(int index) const {
  return layers_.Get(index);
}
inline ::FlashMetaLayerEx* FlashMetaSymbolEx::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::FlashMetaLayerEx* FlashMetaSymbolEx::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaLayerEx >&
FlashMetaSymbolEx::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaLayerEx >*
FlashMetaSymbolEx::mutable_layers() {
  return &layers_;
}

// -------------------------------------------------------------------

// FlashMetaEx

// required string spriteName = 5;
inline bool FlashMetaEx::has_spritename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaEx::set_has_spritename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaEx::clear_has_spritename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaEx::clear_spritename() {
  if (spritename_ != &::google::protobuf::internal::kEmptyString) {
    spritename_->clear();
  }
  clear_has_spritename();
}
inline const ::std::string& FlashMetaEx::spritename() const {
  return *spritename_;
}
inline void FlashMetaEx::set_spritename(const ::std::string& value) {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  spritename_->assign(value);
}
inline void FlashMetaEx::set_spritename(const char* value) {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  spritename_->assign(value);
}
inline void FlashMetaEx::set_spritename(const char* value, size_t size) {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  spritename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMetaEx::mutable_spritename() {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  return spritename_;
}
inline ::std::string* FlashMetaEx::release_spritename() {
  clear_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spritename_;
    spritename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .FlashMetaSymbolEx symbols = 10;
inline int FlashMetaEx::symbols_size() const {
  return symbols_.size();
}
inline void FlashMetaEx::clear_symbols() {
  symbols_.Clear();
}
inline const ::FlashMetaSymbolEx& FlashMetaEx::symbols(int index) const {
  return symbols_.Get(index);
}
inline ::FlashMetaSymbolEx* FlashMetaEx::mutable_symbols(int index) {
  return symbols_.Mutable(index);
}
inline ::FlashMetaSymbolEx* FlashMetaEx::add_symbols() {
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbolEx >&
FlashMetaEx::symbols() const {
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbolEx >*
FlashMetaEx::mutable_symbols() {
  return &symbols_;
}

// repeated .FlashMetaDataEx anims = 20;
inline int FlashMetaEx::anims_size() const {
  return anims_.size();
}
inline void FlashMetaEx::clear_anims() {
  anims_.Clear();
}
inline const ::FlashMetaDataEx& FlashMetaEx::anims(int index) const {
  return anims_.Get(index);
}
inline ::FlashMetaDataEx* FlashMetaEx::mutable_anims(int index) {
  return anims_.Mutable(index);
}
inline ::FlashMetaDataEx* FlashMetaEx::add_anims() {
  return anims_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >&
FlashMetaEx::anims() const {
  return anims_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaDataEx >*
FlashMetaEx::mutable_anims() {
  return &anims_;
}

// repeated string bitMapNames = 25;
inline int FlashMetaEx::bitmapnames_size() const {
  return bitmapnames_.size();
}
inline void FlashMetaEx::clear_bitmapnames() {
  bitmapnames_.Clear();
}
inline const ::std::string& FlashMetaEx::bitmapnames(int index) const {
  return bitmapnames_.Get(index);
}
inline ::std::string* FlashMetaEx::mutable_bitmapnames(int index) {
  return bitmapnames_.Mutable(index);
}
inline void FlashMetaEx::set_bitmapnames(int index, const ::std::string& value) {
  bitmapnames_.Mutable(index)->assign(value);
}
inline void FlashMetaEx::set_bitmapnames(int index, const char* value) {
  bitmapnames_.Mutable(index)->assign(value);
}
inline void FlashMetaEx::set_bitmapnames(int index, const char* value, size_t size) {
  bitmapnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMetaEx::add_bitmapnames() {
  return bitmapnames_.Add();
}
inline void FlashMetaEx::add_bitmapnames(const ::std::string& value) {
  bitmapnames_.Add()->assign(value);
}
inline void FlashMetaEx::add_bitmapnames(const char* value) {
  bitmapnames_.Add()->assign(value);
}
inline void FlashMetaEx::add_bitmapnames(const char* value, size_t size) {
  bitmapnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlashMetaEx::bitmapnames() const {
  return bitmapnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlashMetaEx::mutable_bitmapnames() {
  return &bitmapnames_;
}

// required int32 speed = 30;
inline bool FlashMetaEx::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlashMetaEx::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlashMetaEx::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlashMetaEx::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 FlashMetaEx::speed() const {
  return speed_;
}
inline void FlashMetaEx::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}

// optional int32 screenHeight = 40;
inline bool FlashMetaEx::has_screenheight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FlashMetaEx::set_has_screenheight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FlashMetaEx::clear_has_screenheight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FlashMetaEx::clear_screenheight() {
  screenheight_ = 0;
  clear_has_screenheight();
}
inline ::google::protobuf::int32 FlashMetaEx::screenheight() const {
  return screenheight_;
}
inline void FlashMetaEx::set_screenheight(::google::protobuf::int32 value) {
  set_has_screenheight();
  screenheight_ = value;
}

// repeated .FlashMetaMatrixEx matrixPool = 50;
inline int FlashMetaEx::matrixpool_size() const {
  return matrixpool_.size();
}
inline void FlashMetaEx::clear_matrixpool() {
  matrixpool_.Clear();
}
inline const ::FlashMetaMatrixEx& FlashMetaEx::matrixpool(int index) const {
  return matrixpool_.Get(index);
}
inline ::FlashMetaMatrixEx* FlashMetaEx::mutable_matrixpool(int index) {
  return matrixpool_.Mutable(index);
}
inline ::FlashMetaMatrixEx* FlashMetaEx::add_matrixpool() {
  return matrixpool_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaMatrixEx >&
FlashMetaEx::matrixpool() const {
  return matrixpool_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaMatrixEx >*
FlashMetaEx::mutable_matrixpool() {
  return &matrixpool_;
}

// repeated string namePool = 60;
inline int FlashMetaEx::namepool_size() const {
  return namepool_.size();
}
inline void FlashMetaEx::clear_namepool() {
  namepool_.Clear();
}
inline const ::std::string& FlashMetaEx::namepool(int index) const {
  return namepool_.Get(index);
}
inline ::std::string* FlashMetaEx::mutable_namepool(int index) {
  return namepool_.Mutable(index);
}
inline void FlashMetaEx::set_namepool(int index, const ::std::string& value) {
  namepool_.Mutable(index)->assign(value);
}
inline void FlashMetaEx::set_namepool(int index, const char* value) {
  namepool_.Mutable(index)->assign(value);
}
inline void FlashMetaEx::set_namepool(int index, const char* value, size_t size) {
  namepool_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMetaEx::add_namepool() {
  return namepool_.Add();
}
inline void FlashMetaEx::add_namepool(const ::std::string& value) {
  namepool_.Add()->assign(value);
}
inline void FlashMetaEx::add_namepool(const char* value) {
  namepool_.Add()->assign(value);
}
inline void FlashMetaEx::add_namepool(const char* value, size_t size) {
  namepool_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlashMetaEx::namepool() const {
  return namepool_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlashMetaEx::mutable_namepool() {
  return &namepool_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flashMetaEx_2eproto__INCLUDED
