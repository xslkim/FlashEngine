// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flashMetaEx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flashMetaEx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FlashMetaMatrixEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaMatrixEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaDataEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaDataEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaFrameEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaFrameEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaLayerEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaLayerEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaSymbolEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaSymbolEx_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaEx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaEx_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_flashMetaEx_2eproto() {
  protobuf_AddDesc_flashMetaEx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "flashMetaEx.proto");
  GOOGLE_CHECK(file != NULL);
  FlashMetaMatrixEx_descriptor_ = file->message_type(0);
  static const int FlashMetaMatrixEx_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, mc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, md_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, playonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, singleframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, height_),
  };
  FlashMetaMatrixEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaMatrixEx_descriptor_,
      FlashMetaMatrixEx::default_instance_,
      FlashMetaMatrixEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaMatrixEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaMatrixEx));
  FlashMetaDataEx_descriptor_ = file->message_type(1);
  static const int FlashMetaDataEx_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaDataEx, matrix_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaDataEx, tempmatrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaDataEx, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaDataEx, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaDataEx, insnameid_),
  };
  FlashMetaDataEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaDataEx_descriptor_,
      FlashMetaDataEx::default_instance_,
      FlashMetaDataEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaDataEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaDataEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaDataEx));
  FlashMetaFrameEx_descriptor_ = file->message_type(2);
  static const int FlashMetaFrameEx_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrameEx, startframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrameEx, bitmaps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrameEx, symbols_),
  };
  FlashMetaFrameEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaFrameEx_descriptor_,
      FlashMetaFrameEx::default_instance_,
      FlashMetaFrameEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrameEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrameEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaFrameEx));
  FlashMetaLayerEx_descriptor_ = file->message_type(3);
  static const int FlashMetaLayerEx_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaLayerEx, frames_),
  };
  FlashMetaLayerEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaLayerEx_descriptor_,
      FlashMetaLayerEx::default_instance_,
      FlashMetaLayerEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaLayerEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaLayerEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaLayerEx));
  FlashMetaSymbolEx_descriptor_ = file->message_type(4);
  static const int FlashMetaSymbolEx_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbolEx, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbolEx, max_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbolEx, layers_),
  };
  FlashMetaSymbolEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaSymbolEx_descriptor_,
      FlashMetaSymbolEx::default_instance_,
      FlashMetaSymbolEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbolEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbolEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaSymbolEx));
  FlashMetaEx_descriptor_ = file->message_type(5);
  static const int FlashMetaEx_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, spritename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, symbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, anims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, bitmapnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, screenheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, matrixpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, namepool_),
  };
  FlashMetaEx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaEx_descriptor_,
      FlashMetaEx::default_instance_,
      FlashMetaEx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaEx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaEx));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_flashMetaEx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaMatrixEx_descriptor_, &FlashMetaMatrixEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaDataEx_descriptor_, &FlashMetaDataEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaFrameEx_descriptor_, &FlashMetaFrameEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaLayerEx_descriptor_, &FlashMetaLayerEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaSymbolEx_descriptor_, &FlashMetaSymbolEx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaEx_descriptor_, &FlashMetaEx::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_flashMetaEx_2eproto() {
  delete FlashMetaMatrixEx::default_instance_;
  delete FlashMetaMatrixEx_reflection_;
  delete FlashMetaDataEx::default_instance_;
  delete FlashMetaDataEx_reflection_;
  delete FlashMetaFrameEx::default_instance_;
  delete FlashMetaFrameEx_reflection_;
  delete FlashMetaLayerEx::default_instance_;
  delete FlashMetaLayerEx_reflection_;
  delete FlashMetaSymbolEx::default_instance_;
  delete FlashMetaSymbolEx_reflection_;
  delete FlashMetaEx::default_instance_;
  delete FlashMetaEx_reflection_;
}

void protobuf_AddDesc_flashMetaEx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_flashMeta_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021flashMetaEx.proto\032\017flashMeta.proto\"\275\001\n"
    "\021FlashMetaMatrixEx\022\n\n\002ma\030n \001(\002\022\n\n\002mb\030x \001"
    "(\002\022\013\n\002mc\030\202\001 \001(\002\022\013\n\002md\030\214\001 \001(\002\022\n\n\001a\030\252\001 \001(\002"
    "\022\n\n\001r\030\264\001 \001(\002\022\n\n\001g\030\276\001 \001(\002\022\n\n\001b\030\310\001 \001(\002\022\021\n\010"
    "playOnce\030\322\001 \001(\010\022\024\n\013singleFrame\030\334\001 \001(\010\022\r\n"
    "\005width\0302 \001(\005\022\016\n\006height\030< \001(\005\"z\n\017FlashMet"
    "aDataEx\022\023\n\013matrix_name\030\005 \002(\r\022&\n\ntempMatr"
    "ix\030\025 \001(\0132\022.FlashMetaMatrixEx\022\n\n\002tx\030< \001(\002"
    "\022\n\n\002ty\030A \001(\002\022\022\n\tinsNameId\030\252\001 \001(\005\"l\n\020Flas"
    "hMetaFrameEx\022\022\n\nstartFrame\030\n \001(\005\022!\n\007bitM"
    "aps\030\024 \003(\0132\020.FlashMetaDataEx\022!\n\007symbols\030\036"
    " \003(\0132\020.FlashMetaDataEx\"5\n\020FlashMetaLayer"
    "Ex\022!\n\006frames\030\005 \003(\0132\021.FlashMetaFrameEx\"W\n"
    "\021FlashMetaSymbolEx\022\014\n\004name\030\005 \002(\t\022\021\n\tmax_"
    "frame\030\007 \002(\005\022!\n\006layers\030\n \003(\0132\021.FlashMetaL"
    "ayerEx\"\333\001\n\013FlashMetaEx\022\022\n\nspriteName\030\005 \002"
    "(\t\022#\n\007symbols\030\n \003(\0132\022.FlashMetaSymbolEx\022"
    "\037\n\005anims\030\024 \003(\0132\020.FlashMetaDataEx\022\023\n\013bitM"
    "apNames\030\031 \003(\t\022\r\n\005speed\030\036 \002(\005\022\024\n\014screenHe"
    "ight\030( \001(\005\022&\n\nmatrixPool\0302 \003(\0132\022.FlashMe"
    "taMatrixEx\022\020\n\010namePool\030< \003(\t", 828);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flashMetaEx.proto", &protobuf_RegisterTypes);
  FlashMetaMatrixEx::default_instance_ = new FlashMetaMatrixEx();
  FlashMetaDataEx::default_instance_ = new FlashMetaDataEx();
  FlashMetaFrameEx::default_instance_ = new FlashMetaFrameEx();
  FlashMetaLayerEx::default_instance_ = new FlashMetaLayerEx();
  FlashMetaSymbolEx::default_instance_ = new FlashMetaSymbolEx();
  FlashMetaEx::default_instance_ = new FlashMetaEx();
  FlashMetaMatrixEx::default_instance_->InitAsDefaultInstance();
  FlashMetaDataEx::default_instance_->InitAsDefaultInstance();
  FlashMetaFrameEx::default_instance_->InitAsDefaultInstance();
  FlashMetaLayerEx::default_instance_->InitAsDefaultInstance();
  FlashMetaSymbolEx::default_instance_->InitAsDefaultInstance();
  FlashMetaEx::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_flashMetaEx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_flashMetaEx_2eproto {
  StaticDescriptorInitializer_flashMetaEx_2eproto() {
    protobuf_AddDesc_flashMetaEx_2eproto();
  }
} static_descriptor_initializer_flashMetaEx_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FlashMetaMatrixEx::kMaFieldNumber;
const int FlashMetaMatrixEx::kMbFieldNumber;
const int FlashMetaMatrixEx::kMcFieldNumber;
const int FlashMetaMatrixEx::kMdFieldNumber;
const int FlashMetaMatrixEx::kAFieldNumber;
const int FlashMetaMatrixEx::kRFieldNumber;
const int FlashMetaMatrixEx::kGFieldNumber;
const int FlashMetaMatrixEx::kBFieldNumber;
const int FlashMetaMatrixEx::kPlayOnceFieldNumber;
const int FlashMetaMatrixEx::kSingleFrameFieldNumber;
const int FlashMetaMatrixEx::kWidthFieldNumber;
const int FlashMetaMatrixEx::kHeightFieldNumber;
#endif  // !_MSC_VER

FlashMetaMatrixEx::FlashMetaMatrixEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaMatrixEx::InitAsDefaultInstance() {
}

FlashMetaMatrixEx::FlashMetaMatrixEx(const FlashMetaMatrixEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaMatrixEx::SharedCtor() {
  _cached_size_ = 0;
  ma_ = 0;
  mb_ = 0;
  mc_ = 0;
  md_ = 0;
  a_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  playonce_ = false;
  singleframe_ = false;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaMatrixEx::~FlashMetaMatrixEx() {
  SharedDtor();
}

void FlashMetaMatrixEx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlashMetaMatrixEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaMatrixEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaMatrixEx_descriptor_;
}

const FlashMetaMatrixEx& FlashMetaMatrixEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMetaEx_2eproto();
  return *default_instance_;
}

FlashMetaMatrixEx* FlashMetaMatrixEx::default_instance_ = NULL;

FlashMetaMatrixEx* FlashMetaMatrixEx::New() const {
  return new FlashMetaMatrixEx;
}

void FlashMetaMatrixEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ma_ = 0;
    mb_ = 0;
    mc_ = 0;
    md_ = 0;
    a_ = 0;
    r_ = 0;
    g_ = 0;
    b_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playonce_ = false;
    singleframe_ = false;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaMatrixEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_height;
        break;
      }

      // optional int32 height = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(885)) goto parse_ma;
        break;
      }

      // optional float ma = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ma_)));
          set_has_ma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(965)) goto parse_mb;
        break;
      }

      // optional float mb = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mb_)));
          set_has_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1045)) goto parse_mc;
        break;
      }

      // optional float mc = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mc_)));
          set_has_mc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1125)) goto parse_md;
        break;
      }

      // optional float md = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_md:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_)));
          set_has_md();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1365)) goto parse_a;
        break;
      }

      // optional float a = 170;
      case 170: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1445)) goto parse_r;
        break;
      }

      // optional float r = 180;
      case 180: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1525)) goto parse_g;
        break;
      }

      // optional float g = 190;
      case 190: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1605)) goto parse_b;
        break;
      }

      // optional float b = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1680)) goto parse_playOnce;
        break;
      }

      // optional bool playOnce = 210;
      case 210: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playOnce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playonce_)));
          set_has_playonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1760)) goto parse_singleFrame;
        break;
      }

      // optional bool singleFrame = 220;
      case 220: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_singleFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &singleframe_)));
          set_has_singleframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaMatrixEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 width = 50;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->width(), output);
  }

  // optional int32 height = 60;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->height(), output);
  }

  // optional float ma = 110;
  if (has_ma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->ma(), output);
  }

  // optional float mb = 120;
  if (has_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(120, this->mb(), output);
  }

  // optional float mc = 130;
  if (has_mc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(130, this->mc(), output);
  }

  // optional float md = 140;
  if (has_md()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(140, this->md(), output);
  }

  // optional float a = 170;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(170, this->a(), output);
  }

  // optional float r = 180;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(180, this->r(), output);
  }

  // optional float g = 190;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(190, this->g(), output);
  }

  // optional float b = 200;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(200, this->b(), output);
  }

  // optional bool playOnce = 210;
  if (has_playonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(210, this->playonce(), output);
  }

  // optional bool singleFrame = 220;
  if (has_singleframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(220, this->singleframe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaMatrixEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 width = 50;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->width(), target);
  }

  // optional int32 height = 60;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->height(), target);
  }

  // optional float ma = 110;
  if (has_ma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->ma(), target);
  }

  // optional float mb = 120;
  if (has_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(120, this->mb(), target);
  }

  // optional float mc = 130;
  if (has_mc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(130, this->mc(), target);
  }

  // optional float md = 140;
  if (has_md()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(140, this->md(), target);
  }

  // optional float a = 170;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(170, this->a(), target);
  }

  // optional float r = 180;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(180, this->r(), target);
  }

  // optional float g = 190;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(190, this->g(), target);
  }

  // optional float b = 200;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(200, this->b(), target);
  }

  // optional bool playOnce = 210;
  if (has_playonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(210, this->playonce(), target);
  }

  // optional bool singleFrame = 220;
  if (has_singleframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(220, this->singleframe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaMatrixEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float ma = 110;
    if (has_ma()) {
      total_size += 2 + 4;
    }

    // optional float mb = 120;
    if (has_mb()) {
      total_size += 2 + 4;
    }

    // optional float mc = 130;
    if (has_mc()) {
      total_size += 2 + 4;
    }

    // optional float md = 140;
    if (has_md()) {
      total_size += 2 + 4;
    }

    // optional float a = 170;
    if (has_a()) {
      total_size += 2 + 4;
    }

    // optional float r = 180;
    if (has_r()) {
      total_size += 2 + 4;
    }

    // optional float g = 190;
    if (has_g()) {
      total_size += 2 + 4;
    }

    // optional float b = 200;
    if (has_b()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool playOnce = 210;
    if (has_playonce()) {
      total_size += 2 + 1;
    }

    // optional bool singleFrame = 220;
    if (has_singleframe()) {
      total_size += 2 + 1;
    }

    // optional int32 width = 50;
    if (has_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 60;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaMatrixEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaMatrixEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaMatrixEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaMatrixEx::MergeFrom(const FlashMetaMatrixEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ma()) {
      set_ma(from.ma());
    }
    if (from.has_mb()) {
      set_mb(from.mb());
    }
    if (from.has_mc()) {
      set_mc(from.mc());
    }
    if (from.has_md()) {
      set_md(from.md());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playonce()) {
      set_playonce(from.playonce());
    }
    if (from.has_singleframe()) {
      set_singleframe(from.singleframe());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaMatrixEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaMatrixEx::CopyFrom(const FlashMetaMatrixEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaMatrixEx::IsInitialized() const {

  return true;
}

void FlashMetaMatrixEx::Swap(FlashMetaMatrixEx* other) {
  if (other != this) {
    std::swap(ma_, other->ma_);
    std::swap(mb_, other->mb_);
    std::swap(mc_, other->mc_);
    std::swap(md_, other->md_);
    std::swap(a_, other->a_);
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(playonce_, other->playonce_);
    std::swap(singleframe_, other->singleframe_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaMatrixEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaMatrixEx_descriptor_;
  metadata.reflection = FlashMetaMatrixEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaDataEx::kMatrixNameFieldNumber;
const int FlashMetaDataEx::kTempMatrixFieldNumber;
const int FlashMetaDataEx::kTxFieldNumber;
const int FlashMetaDataEx::kTyFieldNumber;
const int FlashMetaDataEx::kInsNameIdFieldNumber;
#endif  // !_MSC_VER

FlashMetaDataEx::FlashMetaDataEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaDataEx::InitAsDefaultInstance() {
  tempmatrix_ = const_cast< ::FlashMetaMatrixEx*>(&::FlashMetaMatrixEx::default_instance());
}

FlashMetaDataEx::FlashMetaDataEx(const FlashMetaDataEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaDataEx::SharedCtor() {
  _cached_size_ = 0;
  matrix_name_ = 0u;
  tempmatrix_ = NULL;
  tx_ = 0;
  ty_ = 0;
  insnameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaDataEx::~FlashMetaDataEx() {
  SharedDtor();
}

void FlashMetaDataEx::SharedDtor() {
  if (this != default_instance_) {
    delete tempmatrix_;
  }
}

void FlashMetaDataEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaDataEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaDataEx_descriptor_;
}

const FlashMetaDataEx& FlashMetaDataEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMetaEx_2eproto();
  return *default_instance_;
}

FlashMetaDataEx* FlashMetaDataEx::default_instance_ = NULL;

FlashMetaDataEx* FlashMetaDataEx::New() const {
  return new FlashMetaDataEx;
}

void FlashMetaDataEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matrix_name_ = 0u;
    if (has_tempmatrix()) {
      if (tempmatrix_ != NULL) tempmatrix_->::FlashMetaMatrixEx::Clear();
    }
    tx_ = 0;
    ty_ = 0;
    insnameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaDataEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matrix_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matrix_name_)));
          set_has_matrix_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_tempMatrix;
        break;
      }

      // optional .FlashMetaMatrixEx tempMatrix = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tempMatrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tempmatrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_tx;
        break;
      }

      // optional float tx = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(525)) goto parse_ty;
        break;
      }

      // optional float ty = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
          set_has_ty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1360)) goto parse_insNameId;
        break;
      }

      // optional int32 insNameId = 170;
      case 170: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_insNameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &insnameid_)));
          set_has_insnameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaDataEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matrix_name = 5;
  if (has_matrix_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->matrix_name(), output);
  }

  // optional .FlashMetaMatrixEx tempMatrix = 21;
  if (has_tempmatrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->tempmatrix(), output);
  }

  // optional float tx = 60;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->tx(), output);
  }

  // optional float ty = 65;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->ty(), output);
  }

  // optional int32 insNameId = 170;
  if (has_insnameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(170, this->insnameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaDataEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matrix_name = 5;
  if (has_matrix_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->matrix_name(), target);
  }

  // optional .FlashMetaMatrixEx tempMatrix = 21;
  if (has_tempmatrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->tempmatrix(), target);
  }

  // optional float tx = 60;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(60, this->tx(), target);
  }

  // optional float ty = 65;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->ty(), target);
  }

  // optional int32 insNameId = 170;
  if (has_insnameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(170, this->insnameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaDataEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matrix_name = 5;
    if (has_matrix_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matrix_name());
    }

    // optional .FlashMetaMatrixEx tempMatrix = 21;
    if (has_tempmatrix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tempmatrix());
    }

    // optional float tx = 60;
    if (has_tx()) {
      total_size += 2 + 4;
    }

    // optional float ty = 65;
    if (has_ty()) {
      total_size += 2 + 4;
    }

    // optional int32 insNameId = 170;
    if (has_insnameid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->insnameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaDataEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaDataEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaDataEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaDataEx::MergeFrom(const FlashMetaDataEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matrix_name()) {
      set_matrix_name(from.matrix_name());
    }
    if (from.has_tempmatrix()) {
      mutable_tempmatrix()->::FlashMetaMatrixEx::MergeFrom(from.tempmatrix());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_insnameid()) {
      set_insnameid(from.insnameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaDataEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaDataEx::CopyFrom(const FlashMetaDataEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaDataEx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlashMetaDataEx::Swap(FlashMetaDataEx* other) {
  if (other != this) {
    std::swap(matrix_name_, other->matrix_name_);
    std::swap(tempmatrix_, other->tempmatrix_);
    std::swap(tx_, other->tx_);
    std::swap(ty_, other->ty_);
    std::swap(insnameid_, other->insnameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaDataEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaDataEx_descriptor_;
  metadata.reflection = FlashMetaDataEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaFrameEx::kStartFrameFieldNumber;
const int FlashMetaFrameEx::kBitMapsFieldNumber;
const int FlashMetaFrameEx::kSymbolsFieldNumber;
#endif  // !_MSC_VER

FlashMetaFrameEx::FlashMetaFrameEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaFrameEx::InitAsDefaultInstance() {
}

FlashMetaFrameEx::FlashMetaFrameEx(const FlashMetaFrameEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaFrameEx::SharedCtor() {
  _cached_size_ = 0;
  startframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaFrameEx::~FlashMetaFrameEx() {
  SharedDtor();
}

void FlashMetaFrameEx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlashMetaFrameEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaFrameEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaFrameEx_descriptor_;
}

const FlashMetaFrameEx& FlashMetaFrameEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMetaEx_2eproto();
  return *default_instance_;
}

FlashMetaFrameEx* FlashMetaFrameEx::default_instance_ = NULL;

FlashMetaFrameEx* FlashMetaFrameEx::New() const {
  return new FlashMetaFrameEx;
}

void FlashMetaFrameEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startframe_ = 0;
  }
  bitmaps_.Clear();
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaFrameEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startframe_)));
          set_has_startframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bitMaps;
        break;
      }

      // repeated .FlashMetaDataEx bitMaps = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitMaps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bitmaps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bitMaps;
        if (input->ExpectTag(242)) goto parse_symbols;
        break;
      }

      // repeated .FlashMetaDataEx symbols = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaFrameEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startFrame = 10;
  if (has_startframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->startframe(), output);
  }

  // repeated .FlashMetaDataEx bitMaps = 20;
  for (int i = 0; i < this->bitmaps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bitmaps(i), output);
  }

  // repeated .FlashMetaDataEx symbols = 30;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->symbols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaFrameEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startFrame = 10;
  if (has_startframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->startframe(), target);
  }

  // repeated .FlashMetaDataEx bitMaps = 20;
  for (int i = 0; i < this->bitmaps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->bitmaps(i), target);
  }

  // repeated .FlashMetaDataEx symbols = 30;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->symbols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaFrameEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startFrame = 10;
    if (has_startframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startframe());
    }

  }
  // repeated .FlashMetaDataEx bitMaps = 20;
  total_size += 2 * this->bitmaps_size();
  for (int i = 0; i < this->bitmaps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bitmaps(i));
  }

  // repeated .FlashMetaDataEx symbols = 30;
  total_size += 2 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaFrameEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaFrameEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaFrameEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaFrameEx::MergeFrom(const FlashMetaFrameEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  bitmaps_.MergeFrom(from.bitmaps_);
  symbols_.MergeFrom(from.symbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startframe()) {
      set_startframe(from.startframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaFrameEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaFrameEx::CopyFrom(const FlashMetaFrameEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaFrameEx::IsInitialized() const {

  for (int i = 0; i < bitmaps_size(); i++) {
    if (!this->bitmaps(i).IsInitialized()) return false;
  }
  for (int i = 0; i < symbols_size(); i++) {
    if (!this->symbols(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMetaFrameEx::Swap(FlashMetaFrameEx* other) {
  if (other != this) {
    std::swap(startframe_, other->startframe_);
    bitmaps_.Swap(&other->bitmaps_);
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaFrameEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaFrameEx_descriptor_;
  metadata.reflection = FlashMetaFrameEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaLayerEx::kFramesFieldNumber;
#endif  // !_MSC_VER

FlashMetaLayerEx::FlashMetaLayerEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaLayerEx::InitAsDefaultInstance() {
}

FlashMetaLayerEx::FlashMetaLayerEx(const FlashMetaLayerEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaLayerEx::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaLayerEx::~FlashMetaLayerEx() {
  SharedDtor();
}

void FlashMetaLayerEx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlashMetaLayerEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaLayerEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaLayerEx_descriptor_;
}

const FlashMetaLayerEx& FlashMetaLayerEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMetaEx_2eproto();
  return *default_instance_;
}

FlashMetaLayerEx* FlashMetaLayerEx::default_instance_ = NULL;

FlashMetaLayerEx* FlashMetaLayerEx::New() const {
  return new FlashMetaLayerEx;
}

void FlashMetaLayerEx::Clear() {
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaLayerEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FlashMetaFrameEx frames = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaLayerEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FlashMetaFrameEx frames = 5;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaLayerEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FlashMetaFrameEx frames = 5;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaLayerEx::ByteSize() const {
  int total_size = 0;

  // repeated .FlashMetaFrameEx frames = 5;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaLayerEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaLayerEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaLayerEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaLayerEx::MergeFrom(const FlashMetaLayerEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaLayerEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaLayerEx::CopyFrom(const FlashMetaLayerEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaLayerEx::IsInitialized() const {

  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMetaLayerEx::Swap(FlashMetaLayerEx* other) {
  if (other != this) {
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaLayerEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaLayerEx_descriptor_;
  metadata.reflection = FlashMetaLayerEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaSymbolEx::kNameFieldNumber;
const int FlashMetaSymbolEx::kMaxFrameFieldNumber;
const int FlashMetaSymbolEx::kLayersFieldNumber;
#endif  // !_MSC_VER

FlashMetaSymbolEx::FlashMetaSymbolEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaSymbolEx::InitAsDefaultInstance() {
}

FlashMetaSymbolEx::FlashMetaSymbolEx(const FlashMetaSymbolEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaSymbolEx::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_frame_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaSymbolEx::~FlashMetaSymbolEx() {
  SharedDtor();
}

void FlashMetaSymbolEx::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FlashMetaSymbolEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaSymbolEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaSymbolEx_descriptor_;
}

const FlashMetaSymbolEx& FlashMetaSymbolEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMetaEx_2eproto();
  return *default_instance_;
}

FlashMetaSymbolEx* FlashMetaSymbolEx::default_instance_ = NULL;

FlashMetaSymbolEx* FlashMetaSymbolEx::New() const {
  return new FlashMetaSymbolEx;
}

void FlashMetaSymbolEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    max_frame_ = 0;
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaSymbolEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_frame;
        break;
      }

      // required int32 max_frame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_frame_)));
          set_has_max_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_layers;
        break;
      }

      // repeated .FlashMetaLayerEx layers = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaSymbolEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required int32 max_frame = 7;
  if (has_max_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_frame(), output);
  }

  // repeated .FlashMetaLayerEx layers = 10;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaSymbolEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required int32 max_frame = 7;
  if (has_max_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_frame(), target);
  }

  // repeated .FlashMetaLayerEx layers = 10;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaSymbolEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 max_frame = 7;
    if (has_max_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_frame());
    }

  }
  // repeated .FlashMetaLayerEx layers = 10;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaSymbolEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaSymbolEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaSymbolEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaSymbolEx::MergeFrom(const FlashMetaSymbolEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_max_frame()) {
      set_max_frame(from.max_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaSymbolEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaSymbolEx::CopyFrom(const FlashMetaSymbolEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaSymbolEx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMetaSymbolEx::Swap(FlashMetaSymbolEx* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(max_frame_, other->max_frame_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaSymbolEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaSymbolEx_descriptor_;
  metadata.reflection = FlashMetaSymbolEx_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaEx::kSpriteNameFieldNumber;
const int FlashMetaEx::kSymbolsFieldNumber;
const int FlashMetaEx::kAnimsFieldNumber;
const int FlashMetaEx::kBitMapNamesFieldNumber;
const int FlashMetaEx::kSpeedFieldNumber;
const int FlashMetaEx::kScreenHeightFieldNumber;
const int FlashMetaEx::kMatrixPoolFieldNumber;
const int FlashMetaEx::kNamePoolFieldNumber;
#endif  // !_MSC_VER

FlashMetaEx::FlashMetaEx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaEx::InitAsDefaultInstance() {
}

FlashMetaEx::FlashMetaEx(const FlashMetaEx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaEx::SharedCtor() {
  _cached_size_ = 0;
  spritename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speed_ = 0;
  screenheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaEx::~FlashMetaEx() {
  SharedDtor();
}

void FlashMetaEx::SharedDtor() {
  if (spritename_ != &::google::protobuf::internal::kEmptyString) {
    delete spritename_;
  }
  if (this != default_instance_) {
  }
}

void FlashMetaEx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaEx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaEx_descriptor_;
}

const FlashMetaEx& FlashMetaEx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMetaEx_2eproto();
  return *default_instance_;
}

FlashMetaEx* FlashMetaEx::default_instance_ = NULL;

FlashMetaEx* FlashMetaEx::New() const {
  return new FlashMetaEx;
}

void FlashMetaEx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spritename()) {
      if (spritename_ != &::google::protobuf::internal::kEmptyString) {
        spritename_->clear();
      }
    }
    speed_ = 0;
    screenheight_ = 0;
  }
  symbols_.Clear();
  anims_.Clear();
  bitmapnames_.Clear();
  matrixpool_.Clear();
  namepool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaEx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string spriteName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spritename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spritename().data(), this->spritename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_symbols;
        break;
      }

      // repeated .FlashMetaSymbolEx symbols = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_symbols;
        if (input->ExpectTag(162)) goto parse_anims;
        break;
      }

      // repeated .FlashMetaDataEx anims = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anims:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_anims()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_anims;
        if (input->ExpectTag(202)) goto parse_bitMapNames;
        break;
      }

      // repeated string bitMapNames = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitMapNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bitmapnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bitmapnames(this->bitmapnames_size() - 1).data(),
            this->bitmapnames(this->bitmapnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_bitMapNames;
        if (input->ExpectTag(240)) goto parse_speed;
        break;
      }

      // required int32 speed = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_screenHeight;
        break;
      }

      // optional int32 screenHeight = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screenHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenheight_)));
          set_has_screenheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_matrixPool;
        break;
      }

      // repeated .FlashMetaMatrixEx matrixPool = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matrixPool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matrixpool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_matrixPool;
        if (input->ExpectTag(482)) goto parse_namePool;
        break;
      }

      // repeated string namePool = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_namePool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_namepool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namepool(this->namepool_size() - 1).data(),
            this->namepool(this->namepool_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_namePool;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaEx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string spriteName = 5;
  if (has_spritename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spritename().data(), this->spritename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->spritename(), output);
  }

  // repeated .FlashMetaSymbolEx symbols = 10;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->symbols(i), output);
  }

  // repeated .FlashMetaDataEx anims = 20;
  for (int i = 0; i < this->anims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->anims(i), output);
  }

  // repeated string bitMapNames = 25;
  for (int i = 0; i < this->bitmapnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bitmapnames(i).data(), this->bitmapnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->bitmapnames(i), output);
  }

  // required int32 speed = 30;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->speed(), output);
  }

  // optional int32 screenHeight = 40;
  if (has_screenheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->screenheight(), output);
  }

  // repeated .FlashMetaMatrixEx matrixPool = 50;
  for (int i = 0; i < this->matrixpool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->matrixpool(i), output);
  }

  // repeated string namePool = 60;
  for (int i = 0; i < this->namepool_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->namepool(i).data(), this->namepool(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      60, this->namepool(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaEx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string spriteName = 5;
  if (has_spritename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spritename().data(), this->spritename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->spritename(), target);
  }

  // repeated .FlashMetaSymbolEx symbols = 10;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->symbols(i), target);
  }

  // repeated .FlashMetaDataEx anims = 20;
  for (int i = 0; i < this->anims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->anims(i), target);
  }

  // repeated string bitMapNames = 25;
  for (int i = 0; i < this->bitmapnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitmapnames(i).data(), this->bitmapnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(25, this->bitmapnames(i), target);
  }

  // required int32 speed = 30;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->speed(), target);
  }

  // optional int32 screenHeight = 40;
  if (has_screenheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->screenheight(), target);
  }

  // repeated .FlashMetaMatrixEx matrixPool = 50;
  for (int i = 0; i < this->matrixpool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->matrixpool(i), target);
  }

  // repeated string namePool = 60;
  for (int i = 0; i < this->namepool_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namepool(i).data(), this->namepool(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(60, this->namepool(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaEx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string spriteName = 5;
    if (has_spritename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spritename());
    }

    // required int32 speed = 30;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 screenHeight = 40;
    if (has_screenheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenheight());
    }

  }
  // repeated .FlashMetaSymbolEx symbols = 10;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  // repeated .FlashMetaDataEx anims = 20;
  total_size += 2 * this->anims_size();
  for (int i = 0; i < this->anims_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->anims(i));
  }

  // repeated string bitMapNames = 25;
  total_size += 2 * this->bitmapnames_size();
  for (int i = 0; i < this->bitmapnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bitmapnames(i));
  }

  // repeated .FlashMetaMatrixEx matrixPool = 50;
  total_size += 2 * this->matrixpool_size();
  for (int i = 0; i < this->matrixpool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matrixpool(i));
  }

  // repeated string namePool = 60;
  total_size += 2 * this->namepool_size();
  for (int i = 0; i < this->namepool_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namepool(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaEx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaEx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaEx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaEx::MergeFrom(const FlashMetaEx& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  anims_.MergeFrom(from.anims_);
  bitmapnames_.MergeFrom(from.bitmapnames_);
  matrixpool_.MergeFrom(from.matrixpool_);
  namepool_.MergeFrom(from.namepool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spritename()) {
      set_spritename(from.spritename());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_screenheight()) {
      set_screenheight(from.screenheight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaEx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaEx::CopyFrom(const FlashMetaEx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaEx::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  for (int i = 0; i < symbols_size(); i++) {
    if (!this->symbols(i).IsInitialized()) return false;
  }
  for (int i = 0; i < anims_size(); i++) {
    if (!this->anims(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMetaEx::Swap(FlashMetaEx* other) {
  if (other != this) {
    std::swap(spritename_, other->spritename_);
    symbols_.Swap(&other->symbols_);
    anims_.Swap(&other->anims_);
    bitmapnames_.Swap(&other->bitmapnames_);
    std::swap(speed_, other->speed_);
    std::swap(screenheight_, other->screenheight_);
    matrixpool_.Swap(&other->matrixpool_);
    namepool_.Swap(&other->namepool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaEx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaEx_descriptor_;
  metadata.reflection = FlashMetaEx_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
