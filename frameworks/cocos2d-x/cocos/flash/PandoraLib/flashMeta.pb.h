// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flashMeta.proto

#ifndef PROTOBUF_flashMeta_2eproto__INCLUDED
#define PROTOBUF_flashMeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_flashMeta_2eproto();
void protobuf_AssignDesc_flashMeta_2eproto();
void protobuf_ShutdownFile_flashMeta_2eproto();

class FlashMetaData;
class FlashMetaFrame;
class FlashMetaLayer;
class FlashMetaSymbol;
class FlashMeta;

// ===================================================================

class FlashMetaData : public ::google::protobuf::Message {
 public:
  FlashMetaData();
  virtual ~FlashMetaData();

  FlashMetaData(const FlashMetaData& from);

  inline FlashMetaData& operator=(const FlashMetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaData& default_instance();

  void Swap(FlashMetaData* other);

  // implements Message ----------------------------------------------

  FlashMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaData& from);
  void MergeFrom(const FlashMetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 5 [default = ""];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string insName = 100;
  inline bool has_insname() const;
  inline void clear_insname();
  static const int kInsNameFieldNumber = 100;
  inline const ::std::string& insname() const;
  inline void set_insname(const ::std::string& value);
  inline void set_insname(const char* value);
  inline void set_insname(const char* value, size_t size);
  inline ::std::string* mutable_insname();
  inline ::std::string* release_insname();
  inline void set_allocated_insname(::std::string* insname);

  // optional float ma = 110;
  inline bool has_ma() const;
  inline void clear_ma();
  static const int kMaFieldNumber = 110;
  inline float ma() const;
  inline void set_ma(float value);

  // optional float mb = 120;
  inline bool has_mb() const;
  inline void clear_mb();
  static const int kMbFieldNumber = 120;
  inline float mb() const;
  inline void set_mb(float value);

  // optional float mc = 130;
  inline bool has_mc() const;
  inline void clear_mc();
  static const int kMcFieldNumber = 130;
  inline float mc() const;
  inline void set_mc(float value);

  // optional float md = 140;
  inline bool has_md() const;
  inline void clear_md();
  static const int kMdFieldNumber = 140;
  inline float md() const;
  inline void set_md(float value);

  // optional float mtx = 150;
  inline bool has_mtx() const;
  inline void clear_mtx();
  static const int kMtxFieldNumber = 150;
  inline float mtx() const;
  inline void set_mtx(float value);

  // optional float mty = 160;
  inline bool has_mty() const;
  inline void clear_mty();
  static const int kMtyFieldNumber = 160;
  inline float mty() const;
  inline void set_mty(float value);

  // optional float a = 170;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 170;
  inline float a() const;
  inline void set_a(float value);

  // optional float r = 180;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 180;
  inline float r() const;
  inline void set_r(float value);

  // optional float g = 190;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 190;
  inline float g() const;
  inline void set_g(float value);

  // optional float b = 200;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 200;
  inline float b() const;
  inline void set_b(float value);

  // optional bool playOnce = 210;
  inline bool has_playonce() const;
  inline void clear_playonce();
  static const int kPlayOnceFieldNumber = 210;
  inline bool playonce() const;
  inline void set_playonce(bool value);

  // optional bool singleFrame = 220;
  inline bool has_singleframe() const;
  inline void clear_singleframe();
  static const int kSingleFrameFieldNumber = 220;
  inline bool singleframe() const;
  inline void set_singleframe(bool value);

  // optional bool isBrightness = 230;
  inline bool has_isbrightness() const;
  inline void clear_isbrightness();
  static const int kIsBrightnessFieldNumber = 230;
  inline bool isbrightness() const;
  inline void set_isbrightness(bool value);

  // optional int32 width = 50;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 50;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 60;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 60;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FlashMetaData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_insname();
  inline void clear_has_insname();
  inline void set_has_ma();
  inline void clear_has_ma();
  inline void set_has_mb();
  inline void clear_has_mb();
  inline void set_has_mc();
  inline void clear_has_mc();
  inline void set_has_md();
  inline void clear_has_md();
  inline void set_has_mtx();
  inline void clear_has_mtx();
  inline void set_has_mty();
  inline void clear_has_mty();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_playonce();
  inline void clear_has_playonce();
  inline void set_has_singleframe();
  inline void clear_has_singleframe();
  inline void set_has_isbrightness();
  inline void clear_has_isbrightness();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* insname_;
  float ma_;
  float mb_;
  float mc_;
  float md_;
  float mtx_;
  float mty_;
  float a_;
  float r_;
  float g_;
  float b_;
  bool playonce_;
  bool singleframe_;
  bool isbrightness_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_flashMeta_2eproto();
  friend void protobuf_AssignDesc_flashMeta_2eproto();
  friend void protobuf_ShutdownFile_flashMeta_2eproto();

  void InitAsDefaultInstance();
  static FlashMetaData* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaFrame : public ::google::protobuf::Message {
 public:
  FlashMetaFrame();
  virtual ~FlashMetaFrame();

  FlashMetaFrame(const FlashMetaFrame& from);

  inline FlashMetaFrame& operator=(const FlashMetaFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaFrame& default_instance();

  void Swap(FlashMetaFrame* other);

  // implements Message ----------------------------------------------

  FlashMetaFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaFrame& from);
  void MergeFrom(const FlashMetaFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 startFrame = 10;
  inline bool has_startframe() const;
  inline void clear_startframe();
  static const int kStartFrameFieldNumber = 10;
  inline ::google::protobuf::int32 startframe() const;
  inline void set_startframe(::google::protobuf::int32 value);

  // repeated .FlashMetaData bitMaps = 20;
  inline int bitmaps_size() const;
  inline void clear_bitmaps();
  static const int kBitMapsFieldNumber = 20;
  inline const ::FlashMetaData& bitmaps(int index) const;
  inline ::FlashMetaData* mutable_bitmaps(int index);
  inline ::FlashMetaData* add_bitmaps();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaData >&
      bitmaps() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaData >*
      mutable_bitmaps();

  // repeated .FlashMetaData symbols = 30;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 30;
  inline const ::FlashMetaData& symbols(int index) const;
  inline ::FlashMetaData* mutable_symbols(int index);
  inline ::FlashMetaData* add_symbols();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaData >&
      symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaData >*
      mutable_symbols();

  // @@protoc_insertion_point(class_scope:FlashMetaFrame)
 private:
  inline void set_has_startframe();
  inline void clear_has_startframe();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FlashMetaData > bitmaps_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaData > symbols_;
  ::google::protobuf::int32 startframe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_flashMeta_2eproto();
  friend void protobuf_AssignDesc_flashMeta_2eproto();
  friend void protobuf_ShutdownFile_flashMeta_2eproto();

  void InitAsDefaultInstance();
  static FlashMetaFrame* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaLayer : public ::google::protobuf::Message {
 public:
  FlashMetaLayer();
  virtual ~FlashMetaLayer();

  FlashMetaLayer(const FlashMetaLayer& from);

  inline FlashMetaLayer& operator=(const FlashMetaLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaLayer& default_instance();

  void Swap(FlashMetaLayer* other);

  // implements Message ----------------------------------------------

  FlashMetaLayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaLayer& from);
  void MergeFrom(const FlashMetaLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FlashMetaFrame frames = 10;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 10;
  inline const ::FlashMetaFrame& frames(int index) const;
  inline ::FlashMetaFrame* mutable_frames(int index);
  inline ::FlashMetaFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaFrame >*
      mutable_frames();

  // @@protoc_insertion_point(class_scope:FlashMetaLayer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FlashMetaFrame > frames_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_flashMeta_2eproto();
  friend void protobuf_AssignDesc_flashMeta_2eproto();
  friend void protobuf_ShutdownFile_flashMeta_2eproto();

  void InitAsDefaultInstance();
  static FlashMetaLayer* default_instance_;
};
// -------------------------------------------------------------------

class FlashMetaSymbol : public ::google::protobuf::Message {
 public:
  FlashMetaSymbol();
  virtual ~FlashMetaSymbol();

  FlashMetaSymbol(const FlashMetaSymbol& from);

  inline FlashMetaSymbol& operator=(const FlashMetaSymbol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMetaSymbol& default_instance();

  void Swap(FlashMetaSymbol* other);

  // implements Message ----------------------------------------------

  FlashMetaSymbol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMetaSymbol& from);
  void MergeFrom(const FlashMetaSymbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 max_frame = 7;
  inline bool has_max_frame() const;
  inline void clear_max_frame();
  static const int kMaxFrameFieldNumber = 7;
  inline ::google::protobuf::int32 max_frame() const;
  inline void set_max_frame(::google::protobuf::int32 value);

  // repeated .FlashMetaLayer layers = 10;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 10;
  inline const ::FlashMetaLayer& layers(int index) const;
  inline ::FlashMetaLayer* mutable_layers(int index);
  inline ::FlashMetaLayer* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaLayer >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaLayer >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:FlashMetaSymbol)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_max_frame();
  inline void clear_has_max_frame();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaLayer > layers_;
  ::google::protobuf::int32 max_frame_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_flashMeta_2eproto();
  friend void protobuf_AssignDesc_flashMeta_2eproto();
  friend void protobuf_ShutdownFile_flashMeta_2eproto();

  void InitAsDefaultInstance();
  static FlashMetaSymbol* default_instance_;
};
// -------------------------------------------------------------------

class FlashMeta : public ::google::protobuf::Message {
 public:
  FlashMeta();
  virtual ~FlashMeta();

  FlashMeta(const FlashMeta& from);

  inline FlashMeta& operator=(const FlashMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlashMeta& default_instance();

  void Swap(FlashMeta* other);

  // implements Message ----------------------------------------------

  FlashMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlashMeta& from);
  void MergeFrom(const FlashMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string spriteName = 5;
  inline bool has_spritename() const;
  inline void clear_spritename();
  static const int kSpriteNameFieldNumber = 5;
  inline const ::std::string& spritename() const;
  inline void set_spritename(const ::std::string& value);
  inline void set_spritename(const char* value);
  inline void set_spritename(const char* value, size_t size);
  inline ::std::string* mutable_spritename();
  inline ::std::string* release_spritename();
  inline void set_allocated_spritename(::std::string* spritename);

  // repeated .FlashMetaSymbol symbols = 10;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 10;
  inline const ::FlashMetaSymbol& symbols(int index) const;
  inline ::FlashMetaSymbol* mutable_symbols(int index);
  inline ::FlashMetaSymbol* add_symbols();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbol >&
      symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbol >*
      mutable_symbols();

  // repeated .FlashMetaData anims = 20;
  inline int anims_size() const;
  inline void clear_anims();
  static const int kAnimsFieldNumber = 20;
  inline const ::FlashMetaData& anims(int index) const;
  inline ::FlashMetaData* mutable_anims(int index);
  inline ::FlashMetaData* add_anims();
  inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaData >&
      anims() const;
  inline ::google::protobuf::RepeatedPtrField< ::FlashMetaData >*
      mutable_anims();

  // repeated string bitMapNames = 25;
  inline int bitmapnames_size() const;
  inline void clear_bitmapnames();
  static const int kBitMapNamesFieldNumber = 25;
  inline const ::std::string& bitmapnames(int index) const;
  inline ::std::string* mutable_bitmapnames(int index);
  inline void set_bitmapnames(int index, const ::std::string& value);
  inline void set_bitmapnames(int index, const char* value);
  inline void set_bitmapnames(int index, const char* value, size_t size);
  inline ::std::string* add_bitmapnames();
  inline void add_bitmapnames(const ::std::string& value);
  inline void add_bitmapnames(const char* value);
  inline void add_bitmapnames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bitmapnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bitmapnames();

  // required int32 speed = 30;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 30;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // optional int32 screenHeight = 40;
  inline bool has_screenheight() const;
  inline void clear_screenheight();
  static const int kScreenHeightFieldNumber = 40;
  inline ::google::protobuf::int32 screenheight() const;
  inline void set_screenheight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FlashMeta)
 private:
  inline void set_has_spritename();
  inline void clear_has_spritename();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_screenheight();
  inline void clear_has_screenheight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* spritename_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbol > symbols_;
  ::google::protobuf::RepeatedPtrField< ::FlashMetaData > anims_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bitmapnames_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 screenheight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_flashMeta_2eproto();
  friend void protobuf_AssignDesc_flashMeta_2eproto();
  friend void protobuf_ShutdownFile_flashMeta_2eproto();

  void InitAsDefaultInstance();
  static FlashMeta* default_instance_;
};
// ===================================================================


// ===================================================================

// FlashMetaData

// required string name = 5 [default = ""];
inline bool FlashMetaData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FlashMetaData::name() const {
  return *name_;
}
inline void FlashMetaData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlashMetaData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlashMetaData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMetaData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FlashMetaData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlashMetaData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string insName = 100;
inline bool FlashMetaData::has_insname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlashMetaData::set_has_insname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlashMetaData::clear_has_insname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlashMetaData::clear_insname() {
  if (insname_ != &::google::protobuf::internal::kEmptyString) {
    insname_->clear();
  }
  clear_has_insname();
}
inline const ::std::string& FlashMetaData::insname() const {
  return *insname_;
}
inline void FlashMetaData::set_insname(const ::std::string& value) {
  set_has_insname();
  if (insname_ == &::google::protobuf::internal::kEmptyString) {
    insname_ = new ::std::string;
  }
  insname_->assign(value);
}
inline void FlashMetaData::set_insname(const char* value) {
  set_has_insname();
  if (insname_ == &::google::protobuf::internal::kEmptyString) {
    insname_ = new ::std::string;
  }
  insname_->assign(value);
}
inline void FlashMetaData::set_insname(const char* value, size_t size) {
  set_has_insname();
  if (insname_ == &::google::protobuf::internal::kEmptyString) {
    insname_ = new ::std::string;
  }
  insname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMetaData::mutable_insname() {
  set_has_insname();
  if (insname_ == &::google::protobuf::internal::kEmptyString) {
    insname_ = new ::std::string;
  }
  return insname_;
}
inline ::std::string* FlashMetaData::release_insname() {
  clear_has_insname();
  if (insname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = insname_;
    insname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlashMetaData::set_allocated_insname(::std::string* insname) {
  if (insname_ != &::google::protobuf::internal::kEmptyString) {
    delete insname_;
  }
  if (insname) {
    set_has_insname();
    insname_ = insname;
  } else {
    clear_has_insname();
    insname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float ma = 110;
inline bool FlashMetaData::has_ma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlashMetaData::set_has_ma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlashMetaData::clear_has_ma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlashMetaData::clear_ma() {
  ma_ = 0;
  clear_has_ma();
}
inline float FlashMetaData::ma() const {
  return ma_;
}
inline void FlashMetaData::set_ma(float value) {
  set_has_ma();
  ma_ = value;
}

// optional float mb = 120;
inline bool FlashMetaData::has_mb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlashMetaData::set_has_mb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlashMetaData::clear_has_mb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlashMetaData::clear_mb() {
  mb_ = 0;
  clear_has_mb();
}
inline float FlashMetaData::mb() const {
  return mb_;
}
inline void FlashMetaData::set_mb(float value) {
  set_has_mb();
  mb_ = value;
}

// optional float mc = 130;
inline bool FlashMetaData::has_mc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlashMetaData::set_has_mc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlashMetaData::clear_has_mc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlashMetaData::clear_mc() {
  mc_ = 0;
  clear_has_mc();
}
inline float FlashMetaData::mc() const {
  return mc_;
}
inline void FlashMetaData::set_mc(float value) {
  set_has_mc();
  mc_ = value;
}

// optional float md = 140;
inline bool FlashMetaData::has_md() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FlashMetaData::set_has_md() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FlashMetaData::clear_has_md() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FlashMetaData::clear_md() {
  md_ = 0;
  clear_has_md();
}
inline float FlashMetaData::md() const {
  return md_;
}
inline void FlashMetaData::set_md(float value) {
  set_has_md();
  md_ = value;
}

// optional float mtx = 150;
inline bool FlashMetaData::has_mtx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FlashMetaData::set_has_mtx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FlashMetaData::clear_has_mtx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FlashMetaData::clear_mtx() {
  mtx_ = 0;
  clear_has_mtx();
}
inline float FlashMetaData::mtx() const {
  return mtx_;
}
inline void FlashMetaData::set_mtx(float value) {
  set_has_mtx();
  mtx_ = value;
}

// optional float mty = 160;
inline bool FlashMetaData::has_mty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FlashMetaData::set_has_mty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FlashMetaData::clear_has_mty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FlashMetaData::clear_mty() {
  mty_ = 0;
  clear_has_mty();
}
inline float FlashMetaData::mty() const {
  return mty_;
}
inline void FlashMetaData::set_mty(float value) {
  set_has_mty();
  mty_ = value;
}

// optional float a = 170;
inline bool FlashMetaData::has_a() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FlashMetaData::set_has_a() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FlashMetaData::clear_has_a() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FlashMetaData::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float FlashMetaData::a() const {
  return a_;
}
inline void FlashMetaData::set_a(float value) {
  set_has_a();
  a_ = value;
}

// optional float r = 180;
inline bool FlashMetaData::has_r() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FlashMetaData::set_has_r() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FlashMetaData::clear_has_r() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FlashMetaData::clear_r() {
  r_ = 0;
  clear_has_r();
}
inline float FlashMetaData::r() const {
  return r_;
}
inline void FlashMetaData::set_r(float value) {
  set_has_r();
  r_ = value;
}

// optional float g = 190;
inline bool FlashMetaData::has_g() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FlashMetaData::set_has_g() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FlashMetaData::clear_has_g() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FlashMetaData::clear_g() {
  g_ = 0;
  clear_has_g();
}
inline float FlashMetaData::g() const {
  return g_;
}
inline void FlashMetaData::set_g(float value) {
  set_has_g();
  g_ = value;
}

// optional float b = 200;
inline bool FlashMetaData::has_b() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FlashMetaData::set_has_b() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FlashMetaData::clear_has_b() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FlashMetaData::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float FlashMetaData::b() const {
  return b_;
}
inline void FlashMetaData::set_b(float value) {
  set_has_b();
  b_ = value;
}

// optional bool playOnce = 210;
inline bool FlashMetaData::has_playonce() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FlashMetaData::set_has_playonce() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FlashMetaData::clear_has_playonce() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FlashMetaData::clear_playonce() {
  playonce_ = false;
  clear_has_playonce();
}
inline bool FlashMetaData::playonce() const {
  return playonce_;
}
inline void FlashMetaData::set_playonce(bool value) {
  set_has_playonce();
  playonce_ = value;
}

// optional bool singleFrame = 220;
inline bool FlashMetaData::has_singleframe() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FlashMetaData::set_has_singleframe() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FlashMetaData::clear_has_singleframe() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FlashMetaData::clear_singleframe() {
  singleframe_ = false;
  clear_has_singleframe();
}
inline bool FlashMetaData::singleframe() const {
  return singleframe_;
}
inline void FlashMetaData::set_singleframe(bool value) {
  set_has_singleframe();
  singleframe_ = value;
}

// optional bool isBrightness = 230;
inline bool FlashMetaData::has_isbrightness() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FlashMetaData::set_has_isbrightness() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FlashMetaData::clear_has_isbrightness() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FlashMetaData::clear_isbrightness() {
  isbrightness_ = false;
  clear_has_isbrightness();
}
inline bool FlashMetaData::isbrightness() const {
  return isbrightness_;
}
inline void FlashMetaData::set_isbrightness(bool value) {
  set_has_isbrightness();
  isbrightness_ = value;
}

// optional int32 width = 50;
inline bool FlashMetaData::has_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FlashMetaData::set_has_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FlashMetaData::clear_has_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FlashMetaData::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 FlashMetaData::width() const {
  return width_;
}
inline void FlashMetaData::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 60;
inline bool FlashMetaData::has_height() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FlashMetaData::set_has_height() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FlashMetaData::clear_has_height() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FlashMetaData::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 FlashMetaData::height() const {
  return height_;
}
inline void FlashMetaData::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// FlashMetaFrame

// optional int32 startFrame = 10;
inline bool FlashMetaFrame::has_startframe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaFrame::set_has_startframe() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaFrame::clear_has_startframe() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaFrame::clear_startframe() {
  startframe_ = 0;
  clear_has_startframe();
}
inline ::google::protobuf::int32 FlashMetaFrame::startframe() const {
  return startframe_;
}
inline void FlashMetaFrame::set_startframe(::google::protobuf::int32 value) {
  set_has_startframe();
  startframe_ = value;
}

// repeated .FlashMetaData bitMaps = 20;
inline int FlashMetaFrame::bitmaps_size() const {
  return bitmaps_.size();
}
inline void FlashMetaFrame::clear_bitmaps() {
  bitmaps_.Clear();
}
inline const ::FlashMetaData& FlashMetaFrame::bitmaps(int index) const {
  return bitmaps_.Get(index);
}
inline ::FlashMetaData* FlashMetaFrame::mutable_bitmaps(int index) {
  return bitmaps_.Mutable(index);
}
inline ::FlashMetaData* FlashMetaFrame::add_bitmaps() {
  return bitmaps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaData >&
FlashMetaFrame::bitmaps() const {
  return bitmaps_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaData >*
FlashMetaFrame::mutable_bitmaps() {
  return &bitmaps_;
}

// repeated .FlashMetaData symbols = 30;
inline int FlashMetaFrame::symbols_size() const {
  return symbols_.size();
}
inline void FlashMetaFrame::clear_symbols() {
  symbols_.Clear();
}
inline const ::FlashMetaData& FlashMetaFrame::symbols(int index) const {
  return symbols_.Get(index);
}
inline ::FlashMetaData* FlashMetaFrame::mutable_symbols(int index) {
  return symbols_.Mutable(index);
}
inline ::FlashMetaData* FlashMetaFrame::add_symbols() {
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaData >&
FlashMetaFrame::symbols() const {
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaData >*
FlashMetaFrame::mutable_symbols() {
  return &symbols_;
}

// -------------------------------------------------------------------

// FlashMetaLayer

// repeated .FlashMetaFrame frames = 10;
inline int FlashMetaLayer::frames_size() const {
  return frames_.size();
}
inline void FlashMetaLayer::clear_frames() {
  frames_.Clear();
}
inline const ::FlashMetaFrame& FlashMetaLayer::frames(int index) const {
  return frames_.Get(index);
}
inline ::FlashMetaFrame* FlashMetaLayer::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::FlashMetaFrame* FlashMetaLayer::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaFrame >&
FlashMetaLayer::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaFrame >*
FlashMetaLayer::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// FlashMetaSymbol

// required string name = 5;
inline bool FlashMetaSymbol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMetaSymbol::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMetaSymbol::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMetaSymbol::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FlashMetaSymbol::name() const {
  return *name_;
}
inline void FlashMetaSymbol::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlashMetaSymbol::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FlashMetaSymbol::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMetaSymbol::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FlashMetaSymbol::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlashMetaSymbol::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 max_frame = 7;
inline bool FlashMetaSymbol::has_max_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlashMetaSymbol::set_has_max_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlashMetaSymbol::clear_has_max_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlashMetaSymbol::clear_max_frame() {
  max_frame_ = 0;
  clear_has_max_frame();
}
inline ::google::protobuf::int32 FlashMetaSymbol::max_frame() const {
  return max_frame_;
}
inline void FlashMetaSymbol::set_max_frame(::google::protobuf::int32 value) {
  set_has_max_frame();
  max_frame_ = value;
}

// repeated .FlashMetaLayer layers = 10;
inline int FlashMetaSymbol::layers_size() const {
  return layers_.size();
}
inline void FlashMetaSymbol::clear_layers() {
  layers_.Clear();
}
inline const ::FlashMetaLayer& FlashMetaSymbol::layers(int index) const {
  return layers_.Get(index);
}
inline ::FlashMetaLayer* FlashMetaSymbol::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::FlashMetaLayer* FlashMetaSymbol::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaLayer >&
FlashMetaSymbol::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaLayer >*
FlashMetaSymbol::mutable_layers() {
  return &layers_;
}

// -------------------------------------------------------------------

// FlashMeta

// required string spriteName = 5;
inline bool FlashMeta::has_spritename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlashMeta::set_has_spritename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlashMeta::clear_has_spritename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlashMeta::clear_spritename() {
  if (spritename_ != &::google::protobuf::internal::kEmptyString) {
    spritename_->clear();
  }
  clear_has_spritename();
}
inline const ::std::string& FlashMeta::spritename() const {
  return *spritename_;
}
inline void FlashMeta::set_spritename(const ::std::string& value) {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  spritename_->assign(value);
}
inline void FlashMeta::set_spritename(const char* value) {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  spritename_->assign(value);
}
inline void FlashMeta::set_spritename(const char* value, size_t size) {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  spritename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMeta::mutable_spritename() {
  set_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    spritename_ = new ::std::string;
  }
  return spritename_;
}
inline ::std::string* FlashMeta::release_spritename() {
  clear_has_spritename();
  if (spritename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spritename_;
    spritename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlashMeta::set_allocated_spritename(::std::string* spritename) {
  if (spritename_ != &::google::protobuf::internal::kEmptyString) {
    delete spritename_;
  }
  if (spritename) {
    set_has_spritename();
    spritename_ = spritename;
  } else {
    clear_has_spritename();
    spritename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .FlashMetaSymbol symbols = 10;
inline int FlashMeta::symbols_size() const {
  return symbols_.size();
}
inline void FlashMeta::clear_symbols() {
  symbols_.Clear();
}
inline const ::FlashMetaSymbol& FlashMeta::symbols(int index) const {
  return symbols_.Get(index);
}
inline ::FlashMetaSymbol* FlashMeta::mutable_symbols(int index) {
  return symbols_.Mutable(index);
}
inline ::FlashMetaSymbol* FlashMeta::add_symbols() {
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbol >&
FlashMeta::symbols() const {
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaSymbol >*
FlashMeta::mutable_symbols() {
  return &symbols_;
}

// repeated .FlashMetaData anims = 20;
inline int FlashMeta::anims_size() const {
  return anims_.size();
}
inline void FlashMeta::clear_anims() {
  anims_.Clear();
}
inline const ::FlashMetaData& FlashMeta::anims(int index) const {
  return anims_.Get(index);
}
inline ::FlashMetaData* FlashMeta::mutable_anims(int index) {
  return anims_.Mutable(index);
}
inline ::FlashMetaData* FlashMeta::add_anims() {
  return anims_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FlashMetaData >&
FlashMeta::anims() const {
  return anims_;
}
inline ::google::protobuf::RepeatedPtrField< ::FlashMetaData >*
FlashMeta::mutable_anims() {
  return &anims_;
}

// repeated string bitMapNames = 25;
inline int FlashMeta::bitmapnames_size() const {
  return bitmapnames_.size();
}
inline void FlashMeta::clear_bitmapnames() {
  bitmapnames_.Clear();
}
inline const ::std::string& FlashMeta::bitmapnames(int index) const {
  return bitmapnames_.Get(index);
}
inline ::std::string* FlashMeta::mutable_bitmapnames(int index) {
  return bitmapnames_.Mutable(index);
}
inline void FlashMeta::set_bitmapnames(int index, const ::std::string& value) {
  bitmapnames_.Mutable(index)->assign(value);
}
inline void FlashMeta::set_bitmapnames(int index, const char* value) {
  bitmapnames_.Mutable(index)->assign(value);
}
inline void FlashMeta::set_bitmapnames(int index, const char* value, size_t size) {
  bitmapnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlashMeta::add_bitmapnames() {
  return bitmapnames_.Add();
}
inline void FlashMeta::add_bitmapnames(const ::std::string& value) {
  bitmapnames_.Add()->assign(value);
}
inline void FlashMeta::add_bitmapnames(const char* value) {
  bitmapnames_.Add()->assign(value);
}
inline void FlashMeta::add_bitmapnames(const char* value, size_t size) {
  bitmapnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlashMeta::bitmapnames() const {
  return bitmapnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FlashMeta::mutable_bitmapnames() {
  return &bitmapnames_;
}

// required int32 speed = 30;
inline bool FlashMeta::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlashMeta::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlashMeta::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlashMeta::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 FlashMeta::speed() const {
  return speed_;
}
inline void FlashMeta::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}

// optional int32 screenHeight = 40;
inline bool FlashMeta::has_screenheight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FlashMeta::set_has_screenheight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FlashMeta::clear_has_screenheight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FlashMeta::clear_screenheight() {
  screenheight_ = 0;
  clear_has_screenheight();
}
inline ::google::protobuf::int32 FlashMeta::screenheight() const {
  return screenheight_;
}
inline void FlashMeta::set_screenheight(::google::protobuf::int32 value) {
  set_has_screenheight();
  screenheight_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flashMeta_2eproto__INCLUDED
