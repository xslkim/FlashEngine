// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flashMeta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flashMeta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FlashMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMetaSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMetaSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_flashMeta_2eproto() {
  protobuf_AddDesc_flashMeta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "flashMeta.proto");
  GOOGLE_CHECK(file != NULL);
  FlashMetaData_descriptor_ = file->message_type(0);
  static const int FlashMetaData_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, insname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, mc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, md_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, mtx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, mty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, playonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, singleframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, isbrightness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, height_),
  };
  FlashMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaData_descriptor_,
      FlashMetaData::default_instance_,
      FlashMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaData));
  FlashMetaFrame_descriptor_ = file->message_type(1);
  static const int FlashMetaFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrame, startframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrame, bitmaps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrame, symbols_),
  };
  FlashMetaFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaFrame_descriptor_,
      FlashMetaFrame::default_instance_,
      FlashMetaFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaFrame));
  FlashMetaLayer_descriptor_ = file->message_type(2);
  static const int FlashMetaLayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaLayer, frames_),
  };
  FlashMetaLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaLayer_descriptor_,
      FlashMetaLayer::default_instance_,
      FlashMetaLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaLayer));
  FlashMetaSymbol_descriptor_ = file->message_type(3);
  static const int FlashMetaSymbol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbol, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbol, max_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbol, layers_),
  };
  FlashMetaSymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMetaSymbol_descriptor_,
      FlashMetaSymbol::default_instance_,
      FlashMetaSymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMetaSymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMetaSymbol));
  FlashMeta_descriptor_ = file->message_type(4);
  static const int FlashMeta_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, spritename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, symbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, anims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, bitmapnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, screenheight_),
  };
  FlashMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashMeta_descriptor_,
      FlashMeta::default_instance_,
      FlashMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_flashMeta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaData_descriptor_, &FlashMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaFrame_descriptor_, &FlashMetaFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaLayer_descriptor_, &FlashMetaLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMetaSymbol_descriptor_, &FlashMetaSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashMeta_descriptor_, &FlashMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_flashMeta_2eproto() {
  delete FlashMetaData::default_instance_;
  delete FlashMetaData_reflection_;
  delete FlashMetaFrame::default_instance_;
  delete FlashMetaFrame_reflection_;
  delete FlashMetaLayer::default_instance_;
  delete FlashMetaLayer_reflection_;
  delete FlashMetaSymbol::default_instance_;
  delete FlashMetaSymbol_reflection_;
  delete FlashMeta::default_instance_;
  delete FlashMeta_reflection_;
}

void protobuf_AddDesc_flashMeta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017flashMeta.proto\"\215\002\n\rFlashMetaData\022\016\n\004n"
    "ame\030\005 \002(\t:\000\022\017\n\007insName\030d \001(\t\022\n\n\002ma\030n \001(\002"
    "\022\n\n\002mb\030x \001(\002\022\013\n\002mc\030\202\001 \001(\002\022\013\n\002md\030\214\001 \001(\002\022\014"
    "\n\003mtx\030\226\001 \001(\002\022\014\n\003mty\030\240\001 \001(\002\022\n\n\001a\030\252\001 \001(\002\022\n"
    "\n\001r\030\264\001 \001(\002\022\n\n\001g\030\276\001 \001(\002\022\n\n\001b\030\310\001 \001(\002\022\021\n\010pl"
    "ayOnce\030\322\001 \001(\010\022\024\n\013singleFrame\030\334\001 \001(\010\022\025\n\014i"
    "sBrightness\030\346\001 \001(\010\022\r\n\005width\0302 \001(\005\022\016\n\006hei"
    "ght\030< \001(\005\"f\n\016FlashMetaFrame\022\022\n\nstartFram"
    "e\030\n \001(\005\022\037\n\007bitMaps\030\024 \003(\0132\016.FlashMetaData"
    "\022\037\n\007symbols\030\036 \003(\0132\016.FlashMetaData\"1\n\016Fla"
    "shMetaLayer\022\037\n\006frames\030\n \003(\0132\017.FlashMetaF"
    "rame\"S\n\017FlashMetaSymbol\022\014\n\004name\030\005 \002(\t\022\021\n"
    "\tmax_frame\030\007 \002(\005\022\037\n\006layers\030\n \003(\0132\017.Flash"
    "MetaLayer\"\233\001\n\tFlashMeta\022\022\n\nspriteName\030\005 "
    "\002(\t\022!\n\007symbols\030\n \003(\0132\020.FlashMetaSymbol\022\035"
    "\n\005anims\030\024 \003(\0132\016.FlashMetaData\022\023\n\013bitMapN"
    "ames\030\031 \003(\t\022\r\n\005speed\030\036 \002(\005\022\024\n\014screenHeigh"
    "t\030( \001(\005", 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flashMeta.proto", &protobuf_RegisterTypes);
  FlashMetaData::default_instance_ = new FlashMetaData();
  FlashMetaFrame::default_instance_ = new FlashMetaFrame();
  FlashMetaLayer::default_instance_ = new FlashMetaLayer();
  FlashMetaSymbol::default_instance_ = new FlashMetaSymbol();
  FlashMeta::default_instance_ = new FlashMeta();
  FlashMetaData::default_instance_->InitAsDefaultInstance();
  FlashMetaFrame::default_instance_->InitAsDefaultInstance();
  FlashMetaLayer::default_instance_->InitAsDefaultInstance();
  FlashMetaSymbol::default_instance_->InitAsDefaultInstance();
  FlashMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_flashMeta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_flashMeta_2eproto {
  StaticDescriptorInitializer_flashMeta_2eproto() {
    protobuf_AddDesc_flashMeta_2eproto();
  }
} static_descriptor_initializer_flashMeta_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FlashMetaData::kNameFieldNumber;
const int FlashMetaData::kInsNameFieldNumber;
const int FlashMetaData::kMaFieldNumber;
const int FlashMetaData::kMbFieldNumber;
const int FlashMetaData::kMcFieldNumber;
const int FlashMetaData::kMdFieldNumber;
const int FlashMetaData::kMtxFieldNumber;
const int FlashMetaData::kMtyFieldNumber;
const int FlashMetaData::kAFieldNumber;
const int FlashMetaData::kRFieldNumber;
const int FlashMetaData::kGFieldNumber;
const int FlashMetaData::kBFieldNumber;
const int FlashMetaData::kPlayOnceFieldNumber;
const int FlashMetaData::kSingleFrameFieldNumber;
const int FlashMetaData::kIsBrightnessFieldNumber;
const int FlashMetaData::kWidthFieldNumber;
const int FlashMetaData::kHeightFieldNumber;
#endif  // !_MSC_VER

FlashMetaData::FlashMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaData::InitAsDefaultInstance() {
}

FlashMetaData::FlashMetaData(const FlashMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  insname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ma_ = 0;
  mb_ = 0;
  mc_ = 0;
  md_ = 0;
  mtx_ = 0;
  mty_ = 0;
  a_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  playonce_ = false;
  singleframe_ = false;
  isbrightness_ = false;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaData::~FlashMetaData() {
  SharedDtor();
}

void FlashMetaData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (insname_ != &::google::protobuf::internal::kEmptyString) {
    delete insname_;
  }
  if (this != default_instance_) {
  }
}

void FlashMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaData_descriptor_;
}

const FlashMetaData& FlashMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMeta_2eproto();
  return *default_instance_;
}

FlashMetaData* FlashMetaData::default_instance_ = NULL;

FlashMetaData* FlashMetaData::New() const {
  return new FlashMetaData;
}

void FlashMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_insname()) {
      if (insname_ != &::google::protobuf::internal::kEmptyString) {
        insname_->clear();
      }
    }
    ma_ = 0;
    mb_ = 0;
    mc_ = 0;
    md_ = 0;
    mtx_ = 0;
    mty_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    a_ = 0;
    r_ = 0;
    g_ = 0;
    b_ = 0;
    playonce_ = false;
    singleframe_ = false;
    isbrightness_ = false;
    width_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_width;
        break;
      }

      // optional int32 width = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_height;
        break;
      }

      // optional int32 height = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_insName;
        break;
      }

      // optional string insName = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_insName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->insname().data(), this->insname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(885)) goto parse_ma;
        break;
      }

      // optional float ma = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ma_)));
          set_has_ma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(965)) goto parse_mb;
        break;
      }

      // optional float mb = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mb_)));
          set_has_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1045)) goto parse_mc;
        break;
      }

      // optional float mc = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mc_)));
          set_has_mc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1125)) goto parse_md;
        break;
      }

      // optional float md = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_md:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_)));
          set_has_md();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1205)) goto parse_mtx;
        break;
      }

      // optional float mtx = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mtx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mtx_)));
          set_has_mtx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1285)) goto parse_mty;
        break;
      }

      // optional float mty = 160;
      case 160: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mty_)));
          set_has_mty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1365)) goto parse_a;
        break;
      }

      // optional float a = 170;
      case 170: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1445)) goto parse_r;
        break;
      }

      // optional float r = 180;
      case 180: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1525)) goto parse_g;
        break;
      }

      // optional float g = 190;
      case 190: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1605)) goto parse_b;
        break;
      }

      // optional float b = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1680)) goto parse_playOnce;
        break;
      }

      // optional bool playOnce = 210;
      case 210: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playOnce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playonce_)));
          set_has_playonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1760)) goto parse_singleFrame;
        break;
      }

      // optional bool singleFrame = 220;
      case 220: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_singleFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &singleframe_)));
          set_has_singleframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1840)) goto parse_isBrightness;
        break;
      }

      // optional bool isBrightness = 230;
      case 230: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBrightness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbrightness_)));
          set_has_isbrightness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int32 width = 50;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->width(), output);
  }

  // optional int32 height = 60;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->height(), output);
  }

  // optional string insName = 100;
  if (has_insname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insname().data(), this->insname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->insname(), output);
  }

  // optional float ma = 110;
  if (has_ma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->ma(), output);
  }

  // optional float mb = 120;
  if (has_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(120, this->mb(), output);
  }

  // optional float mc = 130;
  if (has_mc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(130, this->mc(), output);
  }

  // optional float md = 140;
  if (has_md()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(140, this->md(), output);
  }

  // optional float mtx = 150;
  if (has_mtx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(150, this->mtx(), output);
  }

  // optional float mty = 160;
  if (has_mty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(160, this->mty(), output);
  }

  // optional float a = 170;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(170, this->a(), output);
  }

  // optional float r = 180;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(180, this->r(), output);
  }

  // optional float g = 190;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(190, this->g(), output);
  }

  // optional float b = 200;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(200, this->b(), output);
  }

  // optional bool playOnce = 210;
  if (has_playonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(210, this->playonce(), output);
  }

  // optional bool singleFrame = 220;
  if (has_singleframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(220, this->singleframe(), output);
  }

  // optional bool isBrightness = 230;
  if (has_isbrightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(230, this->isbrightness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 5 [default = ""];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 width = 50;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->width(), target);
  }

  // optional int32 height = 60;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->height(), target);
  }

  // optional string insName = 100;
  if (has_insname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insname().data(), this->insname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->insname(), target);
  }

  // optional float ma = 110;
  if (has_ma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->ma(), target);
  }

  // optional float mb = 120;
  if (has_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(120, this->mb(), target);
  }

  // optional float mc = 130;
  if (has_mc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(130, this->mc(), target);
  }

  // optional float md = 140;
  if (has_md()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(140, this->md(), target);
  }

  // optional float mtx = 150;
  if (has_mtx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(150, this->mtx(), target);
  }

  // optional float mty = 160;
  if (has_mty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(160, this->mty(), target);
  }

  // optional float a = 170;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(170, this->a(), target);
  }

  // optional float r = 180;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(180, this->r(), target);
  }

  // optional float g = 190;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(190, this->g(), target);
  }

  // optional float b = 200;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(200, this->b(), target);
  }

  // optional bool playOnce = 210;
  if (has_playonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(210, this->playonce(), target);
  }

  // optional bool singleFrame = 220;
  if (has_singleframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(220, this->singleframe(), target);
  }

  // optional bool isBrightness = 230;
  if (has_isbrightness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(230, this->isbrightness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 5 [default = ""];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string insName = 100;
    if (has_insname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insname());
    }

    // optional float ma = 110;
    if (has_ma()) {
      total_size += 2 + 4;
    }

    // optional float mb = 120;
    if (has_mb()) {
      total_size += 2 + 4;
    }

    // optional float mc = 130;
    if (has_mc()) {
      total_size += 2 + 4;
    }

    // optional float md = 140;
    if (has_md()) {
      total_size += 2 + 4;
    }

    // optional float mtx = 150;
    if (has_mtx()) {
      total_size += 2 + 4;
    }

    // optional float mty = 160;
    if (has_mty()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float a = 170;
    if (has_a()) {
      total_size += 2 + 4;
    }

    // optional float r = 180;
    if (has_r()) {
      total_size += 2 + 4;
    }

    // optional float g = 190;
    if (has_g()) {
      total_size += 2 + 4;
    }

    // optional float b = 200;
    if (has_b()) {
      total_size += 2 + 4;
    }

    // optional bool playOnce = 210;
    if (has_playonce()) {
      total_size += 2 + 1;
    }

    // optional bool singleFrame = 220;
    if (has_singleframe()) {
      total_size += 2 + 1;
    }

    // optional bool isBrightness = 230;
    if (has_isbrightness()) {
      total_size += 2 + 1;
    }

    // optional int32 width = 50;
    if (has_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 height = 60;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaData::MergeFrom(const FlashMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_insname()) {
      set_insname(from.insname());
    }
    if (from.has_ma()) {
      set_ma(from.ma());
    }
    if (from.has_mb()) {
      set_mb(from.mb());
    }
    if (from.has_mc()) {
      set_mc(from.mc());
    }
    if (from.has_md()) {
      set_md(from.md());
    }
    if (from.has_mtx()) {
      set_mtx(from.mtx());
    }
    if (from.has_mty()) {
      set_mty(from.mty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_playonce()) {
      set_playonce(from.playonce());
    }
    if (from.has_singleframe()) {
      set_singleframe(from.singleframe());
    }
    if (from.has_isbrightness()) {
      set_isbrightness(from.isbrightness());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaData::CopyFrom(const FlashMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlashMetaData::Swap(FlashMetaData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(insname_, other->insname_);
    std::swap(ma_, other->ma_);
    std::swap(mb_, other->mb_);
    std::swap(mc_, other->mc_);
    std::swap(md_, other->md_);
    std::swap(mtx_, other->mtx_);
    std::swap(mty_, other->mty_);
    std::swap(a_, other->a_);
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(playonce_, other->playonce_);
    std::swap(singleframe_, other->singleframe_);
    std::swap(isbrightness_, other->isbrightness_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaData_descriptor_;
  metadata.reflection = FlashMetaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaFrame::kStartFrameFieldNumber;
const int FlashMetaFrame::kBitMapsFieldNumber;
const int FlashMetaFrame::kSymbolsFieldNumber;
#endif  // !_MSC_VER

FlashMetaFrame::FlashMetaFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaFrame::InitAsDefaultInstance() {
}

FlashMetaFrame::FlashMetaFrame(const FlashMetaFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaFrame::SharedCtor() {
  _cached_size_ = 0;
  startframe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaFrame::~FlashMetaFrame() {
  SharedDtor();
}

void FlashMetaFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlashMetaFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaFrame_descriptor_;
}

const FlashMetaFrame& FlashMetaFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMeta_2eproto();
  return *default_instance_;
}

FlashMetaFrame* FlashMetaFrame::default_instance_ = NULL;

FlashMetaFrame* FlashMetaFrame::New() const {
  return new FlashMetaFrame;
}

void FlashMetaFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startframe_ = 0;
  }
  bitmaps_.Clear();
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 startFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startframe_)));
          set_has_startframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bitMaps;
        break;
      }

      // repeated .FlashMetaData bitMaps = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitMaps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bitmaps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bitMaps;
        if (input->ExpectTag(242)) goto parse_symbols;
        break;
      }

      // repeated .FlashMetaData symbols = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 startFrame = 10;
  if (has_startframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->startframe(), output);
  }

  // repeated .FlashMetaData bitMaps = 20;
  for (int i = 0; i < this->bitmaps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bitmaps(i), output);
  }

  // repeated .FlashMetaData symbols = 30;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->symbols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 startFrame = 10;
  if (has_startframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->startframe(), target);
  }

  // repeated .FlashMetaData bitMaps = 20;
  for (int i = 0; i < this->bitmaps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->bitmaps(i), target);
  }

  // repeated .FlashMetaData symbols = 30;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->symbols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 startFrame = 10;
    if (has_startframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startframe());
    }

  }
  // repeated .FlashMetaData bitMaps = 20;
  total_size += 2 * this->bitmaps_size();
  for (int i = 0; i < this->bitmaps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bitmaps(i));
  }

  // repeated .FlashMetaData symbols = 30;
  total_size += 2 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaFrame::MergeFrom(const FlashMetaFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  bitmaps_.MergeFrom(from.bitmaps_);
  symbols_.MergeFrom(from.symbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startframe()) {
      set_startframe(from.startframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaFrame::CopyFrom(const FlashMetaFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaFrame::IsInitialized() const {

  for (int i = 0; i < bitmaps_size(); i++) {
    if (!this->bitmaps(i).IsInitialized()) return false;
  }
  for (int i = 0; i < symbols_size(); i++) {
    if (!this->symbols(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMetaFrame::Swap(FlashMetaFrame* other) {
  if (other != this) {
    std::swap(startframe_, other->startframe_);
    bitmaps_.Swap(&other->bitmaps_);
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaFrame_descriptor_;
  metadata.reflection = FlashMetaFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaLayer::kFramesFieldNumber;
#endif  // !_MSC_VER

FlashMetaLayer::FlashMetaLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaLayer::InitAsDefaultInstance() {
}

FlashMetaLayer::FlashMetaLayer(const FlashMetaLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaLayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaLayer::~FlashMetaLayer() {
  SharedDtor();
}

void FlashMetaLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlashMetaLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaLayer_descriptor_;
}

const FlashMetaLayer& FlashMetaLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMeta_2eproto();
  return *default_instance_;
}

FlashMetaLayer* FlashMetaLayer::default_instance_ = NULL;

FlashMetaLayer* FlashMetaLayer::New() const {
  return new FlashMetaLayer;
}

void FlashMetaLayer::Clear() {
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FlashMetaFrame frames = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FlashMetaFrame frames = 10;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FlashMetaFrame frames = 10;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaLayer::ByteSize() const {
  int total_size = 0;

  // repeated .FlashMetaFrame frames = 10;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaLayer::MergeFrom(const FlashMetaLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaLayer::CopyFrom(const FlashMetaLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaLayer::IsInitialized() const {

  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMetaLayer::Swap(FlashMetaLayer* other) {
  if (other != this) {
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaLayer_descriptor_;
  metadata.reflection = FlashMetaLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMetaSymbol::kNameFieldNumber;
const int FlashMetaSymbol::kMaxFrameFieldNumber;
const int FlashMetaSymbol::kLayersFieldNumber;
#endif  // !_MSC_VER

FlashMetaSymbol::FlashMetaSymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMetaSymbol::InitAsDefaultInstance() {
}

FlashMetaSymbol::FlashMetaSymbol(const FlashMetaSymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMetaSymbol::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_frame_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMetaSymbol::~FlashMetaSymbol() {
  SharedDtor();
}

void FlashMetaSymbol::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FlashMetaSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMetaSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMetaSymbol_descriptor_;
}

const FlashMetaSymbol& FlashMetaSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMeta_2eproto();
  return *default_instance_;
}

FlashMetaSymbol* FlashMetaSymbol::default_instance_ = NULL;

FlashMetaSymbol* FlashMetaSymbol::New() const {
  return new FlashMetaSymbol;
}

void FlashMetaSymbol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    max_frame_ = 0;
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMetaSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_frame;
        break;
      }

      // required int32 max_frame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_frame_)));
          set_has_max_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_layers;
        break;
      }

      // repeated .FlashMetaLayer layers = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMetaSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required int32 max_frame = 7;
  if (has_max_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_frame(), output);
  }

  // repeated .FlashMetaLayer layers = 10;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMetaSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required int32 max_frame = 7;
  if (has_max_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_frame(), target);
  }

  // repeated .FlashMetaLayer layers = 10;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMetaSymbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 max_frame = 7;
    if (has_max_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_frame());
    }

  }
  // repeated .FlashMetaLayer layers = 10;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMetaSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMetaSymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMetaSymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMetaSymbol::MergeFrom(const FlashMetaSymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_max_frame()) {
      set_max_frame(from.max_frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMetaSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMetaSymbol::CopyFrom(const FlashMetaSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMetaSymbol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMetaSymbol::Swap(FlashMetaSymbol* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(max_frame_, other->max_frame_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMetaSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMetaSymbol_descriptor_;
  metadata.reflection = FlashMetaSymbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashMeta::kSpriteNameFieldNumber;
const int FlashMeta::kSymbolsFieldNumber;
const int FlashMeta::kAnimsFieldNumber;
const int FlashMeta::kBitMapNamesFieldNumber;
const int FlashMeta::kSpeedFieldNumber;
const int FlashMeta::kScreenHeightFieldNumber;
#endif  // !_MSC_VER

FlashMeta::FlashMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashMeta::InitAsDefaultInstance() {
}

FlashMeta::FlashMeta(const FlashMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashMeta::SharedCtor() {
  _cached_size_ = 0;
  spritename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  speed_ = 0;
  screenheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashMeta::~FlashMeta() {
  SharedDtor();
}

void FlashMeta::SharedDtor() {
  if (spritename_ != &::google::protobuf::internal::kEmptyString) {
    delete spritename_;
  }
  if (this != default_instance_) {
  }
}

void FlashMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashMeta_descriptor_;
}

const FlashMeta& FlashMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_flashMeta_2eproto();
  return *default_instance_;
}

FlashMeta* FlashMeta::default_instance_ = NULL;

FlashMeta* FlashMeta::New() const {
  return new FlashMeta;
}

void FlashMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spritename()) {
      if (spritename_ != &::google::protobuf::internal::kEmptyString) {
        spritename_->clear();
      }
    }
    speed_ = 0;
    screenheight_ = 0;
  }
  symbols_.Clear();
  anims_.Clear();
  bitmapnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlashMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string spriteName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spritename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spritename().data(), this->spritename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_symbols;
        break;
      }

      // repeated .FlashMetaSymbol symbols = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_symbols;
        if (input->ExpectTag(162)) goto parse_anims;
        break;
      }

      // repeated .FlashMetaData anims = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anims:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_anims()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_anims;
        if (input->ExpectTag(202)) goto parse_bitMapNames;
        break;
      }

      // repeated string bitMapNames = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitMapNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_bitmapnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bitmapnames(this->bitmapnames_size() - 1).data(),
            this->bitmapnames(this->bitmapnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_bitMapNames;
        if (input->ExpectTag(240)) goto parse_speed;
        break;
      }

      // required int32 speed = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_screenHeight;
        break;
      }

      // optional int32 screenHeight = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screenHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenheight_)));
          set_has_screenheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlashMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string spriteName = 5;
  if (has_spritename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spritename().data(), this->spritename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->spritename(), output);
  }

  // repeated .FlashMetaSymbol symbols = 10;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->symbols(i), output);
  }

  // repeated .FlashMetaData anims = 20;
  for (int i = 0; i < this->anims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->anims(i), output);
  }

  // repeated string bitMapNames = 25;
  for (int i = 0; i < this->bitmapnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->bitmapnames(i).data(), this->bitmapnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->bitmapnames(i), output);
  }

  // required int32 speed = 30;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->speed(), output);
  }

  // optional int32 screenHeight = 40;
  if (has_screenheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->screenheight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string spriteName = 5;
  if (has_spritename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spritename().data(), this->spritename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->spritename(), target);
  }

  // repeated .FlashMetaSymbol symbols = 10;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->symbols(i), target);
  }

  // repeated .FlashMetaData anims = 20;
  for (int i = 0; i < this->anims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->anims(i), target);
  }

  // repeated string bitMapNames = 25;
  for (int i = 0; i < this->bitmapnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitmapnames(i).data(), this->bitmapnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(25, this->bitmapnames(i), target);
  }

  // required int32 speed = 30;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->speed(), target);
  }

  // optional int32 screenHeight = 40;
  if (has_screenheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->screenheight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string spriteName = 5;
    if (has_spritename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spritename());
    }

    // required int32 speed = 30;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 screenHeight = 40;
    if (has_screenheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenheight());
    }

  }
  // repeated .FlashMetaSymbol symbols = 10;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  // repeated .FlashMetaData anims = 20;
  total_size += 2 * this->anims_size();
  for (int i = 0; i < this->anims_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->anims(i));
  }

  // repeated string bitMapNames = 25;
  total_size += 2 * this->bitmapnames_size();
  for (int i = 0; i < this->bitmapnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->bitmapnames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlashMeta::MergeFrom(const FlashMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  anims_.MergeFrom(from.anims_);
  bitmapnames_.MergeFrom(from.bitmapnames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spritename()) {
      set_spritename(from.spritename());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_screenheight()) {
      set_screenheight(from.screenheight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlashMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlashMeta::CopyFrom(const FlashMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlashMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  for (int i = 0; i < symbols_size(); i++) {
    if (!this->symbols(i).IsInitialized()) return false;
  }
  for (int i = 0; i < anims_size(); i++) {
    if (!this->anims(i).IsInitialized()) return false;
  }
  return true;
}

void FlashMeta::Swap(FlashMeta* other) {
  if (other != this) {
    std::swap(spritename_, other->spritename_);
    symbols_.Swap(&other->symbols_);
    anims_.Swap(&other->anims_);
    bitmapnames_.Swap(&other->bitmapnames_);
    std::swap(speed_, other->speed_);
    std::swap(screenheight_, other->screenheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlashMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashMeta_descriptor_;
  metadata.reflection = FlashMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
