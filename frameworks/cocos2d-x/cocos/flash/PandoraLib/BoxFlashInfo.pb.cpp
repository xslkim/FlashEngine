// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BoxFlashInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BoxFlashInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BoxTrans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxTrans_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxDomFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxDomFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxActionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxActionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoxFlashInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoxFlashInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BoxFlashInfo_2eproto() {
  protobuf_AddDesc_BoxFlashInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BoxFlashInfo.proto");
  GOOGLE_CHECK(file != NULL);
  BoxTrans_descriptor_ = file->message_type(0);
  static const int BoxTrans_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, ma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, mc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, md_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, mtx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, mty_),
  };
  BoxTrans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxTrans_descriptor_,
      BoxTrans::default_instance_,
      BoxTrans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxTrans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxTrans));
  BoxDomFrame_descriptor_ = file->message_type(1);
  static const int BoxDomFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDomFrame, startframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDomFrame, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDomFrame, trans_),
  };
  BoxDomFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxDomFrame_descriptor_,
      BoxDomFrame::default_instance_,
      BoxDomFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDomFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxDomFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxDomFrame));
  BoxActionInfo_descriptor_ = file->message_type(2);
  static const int BoxActionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxActionInfo, actionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxActionInfo, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxActionInfo, hurtdomframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxActionInfo, attackdomframe_),
  };
  BoxActionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxActionInfo_descriptor_,
      BoxActionInfo::default_instance_,
      BoxActionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxActionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxActionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxActionInfo));
  BoxFlashInfo_descriptor_ = file->message_type(3);
  static const int BoxFlashInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxFlashInfo, spritename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxFlashInfo, actioninfo_),
  };
  BoxFlashInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoxFlashInfo_descriptor_,
      BoxFlashInfo::default_instance_,
      BoxFlashInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxFlashInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoxFlashInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoxFlashInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BoxFlashInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxTrans_descriptor_, &BoxTrans::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxDomFrame_descriptor_, &BoxDomFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxActionInfo_descriptor_, &BoxActionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoxFlashInfo_descriptor_, &BoxFlashInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BoxFlashInfo_2eproto() {
  delete BoxTrans::default_instance_;
  delete BoxTrans_reflection_;
  delete BoxDomFrame::default_instance_;
  delete BoxDomFrame_reflection_;
  delete BoxActionInfo::default_instance_;
  delete BoxActionInfo_reflection_;
  delete BoxFlashInfo::default_instance_;
  delete BoxFlashInfo_reflection_;
}

void protobuf_AddDesc_BoxFlashInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022BoxFlashInfo.proto\"X\n\010BoxTrans\022\n\n\002ma\030n"
    " \001(\002\022\n\n\002mb\030x \001(\002\022\013\n\002mc\030\202\001 \001(\002\022\013\n\002md\030\214\001 \001"
    "(\002\022\014\n\003mtx\030\226\001 \001(\002\022\014\n\003mty\030\240\001 \001(\002\"M\n\013BoxDom"
    "Frame\022\022\n\nstartFrame\030\n \002(\005\022\020\n\010duration\030\024 "
    "\002(\005\022\030\n\005trans\030\036 \003(\0132\t.BoxTrans\"\207\001\n\rBoxAct"
    "ionInfo\022\022\n\nactionName\030\005 \002(\t\022\030\n\005trans\030\036 \002"
    "(\0132\t.BoxTrans\022\"\n\014hurtDomFrame\030\n \003(\0132\014.Bo"
    "xDomFrame\022$\n\016attackDomFrame\030\024 \003(\0132\014.BoxD"
    "omFrame\"F\n\014BoxFlashInfo\022\022\n\nspriteName\030\005 "
    "\002(\t\022\"\n\nactionInfo\030\n \003(\0132\016.BoxActionInfo", 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BoxFlashInfo.proto", &protobuf_RegisterTypes);
  BoxTrans::default_instance_ = new BoxTrans();
  BoxDomFrame::default_instance_ = new BoxDomFrame();
  BoxActionInfo::default_instance_ = new BoxActionInfo();
  BoxFlashInfo::default_instance_ = new BoxFlashInfo();
  BoxTrans::default_instance_->InitAsDefaultInstance();
  BoxDomFrame::default_instance_->InitAsDefaultInstance();
  BoxActionInfo::default_instance_->InitAsDefaultInstance();
  BoxFlashInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BoxFlashInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BoxFlashInfo_2eproto {
  StaticDescriptorInitializer_BoxFlashInfo_2eproto() {
    protobuf_AddDesc_BoxFlashInfo_2eproto();
  }
} static_descriptor_initializer_BoxFlashInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BoxTrans::kMaFieldNumber;
const int BoxTrans::kMbFieldNumber;
const int BoxTrans::kMcFieldNumber;
const int BoxTrans::kMdFieldNumber;
const int BoxTrans::kMtxFieldNumber;
const int BoxTrans::kMtyFieldNumber;
#endif  // !_MSC_VER

BoxTrans::BoxTrans()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxTrans::InitAsDefaultInstance() {
}

BoxTrans::BoxTrans(const BoxTrans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxTrans::SharedCtor() {
  _cached_size_ = 0;
  ma_ = 0;
  mb_ = 0;
  mc_ = 0;
  md_ = 0;
  mtx_ = 0;
  mty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxTrans::~BoxTrans() {
  SharedDtor();
}

void BoxTrans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxTrans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxTrans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxTrans_descriptor_;
}

const BoxTrans& BoxTrans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxFlashInfo_2eproto();
  return *default_instance_;
}

BoxTrans* BoxTrans::default_instance_ = NULL;

BoxTrans* BoxTrans::New() const {
  return new BoxTrans;
}

void BoxTrans::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ma_ = 0;
    mb_ = 0;
    mc_ = 0;
    md_ = 0;
    mtx_ = 0;
    mty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxTrans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float ma = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ma_)));
          set_has_ma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(965)) goto parse_mb;
        break;
      }

      // optional float mb = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mb_)));
          set_has_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1045)) goto parse_mc;
        break;
      }

      // optional float mc = 130;
      case 130: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mc_)));
          set_has_mc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1125)) goto parse_md;
        break;
      }

      // optional float md = 140;
      case 140: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_md:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_)));
          set_has_md();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1205)) goto parse_mtx;
        break;
      }

      // optional float mtx = 150;
      case 150: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mtx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mtx_)));
          set_has_mtx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1285)) goto parse_mty;
        break;
      }

      // optional float mty = 160;
      case 160: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mty_)));
          set_has_mty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxTrans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float ma = 110;
  if (has_ma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->ma(), output);
  }

  // optional float mb = 120;
  if (has_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(120, this->mb(), output);
  }

  // optional float mc = 130;
  if (has_mc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(130, this->mc(), output);
  }

  // optional float md = 140;
  if (has_md()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(140, this->md(), output);
  }

  // optional float mtx = 150;
  if (has_mtx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(150, this->mtx(), output);
  }

  // optional float mty = 160;
  if (has_mty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(160, this->mty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxTrans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float ma = 110;
  if (has_ma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->ma(), target);
  }

  // optional float mb = 120;
  if (has_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(120, this->mb(), target);
  }

  // optional float mc = 130;
  if (has_mc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(130, this->mc(), target);
  }

  // optional float md = 140;
  if (has_md()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(140, this->md(), target);
  }

  // optional float mtx = 150;
  if (has_mtx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(150, this->mtx(), target);
  }

  // optional float mty = 160;
  if (has_mty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(160, this->mty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxTrans::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float ma = 110;
    if (has_ma()) {
      total_size += 2 + 4;
    }

    // optional float mb = 120;
    if (has_mb()) {
      total_size += 2 + 4;
    }

    // optional float mc = 130;
    if (has_mc()) {
      total_size += 2 + 4;
    }

    // optional float md = 140;
    if (has_md()) {
      total_size += 2 + 4;
    }

    // optional float mtx = 150;
    if (has_mtx()) {
      total_size += 2 + 4;
    }

    // optional float mty = 160;
    if (has_mty()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxTrans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxTrans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxTrans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxTrans::MergeFrom(const BoxTrans& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ma()) {
      set_ma(from.ma());
    }
    if (from.has_mb()) {
      set_mb(from.mb());
    }
    if (from.has_mc()) {
      set_mc(from.mc());
    }
    if (from.has_md()) {
      set_md(from.md());
    }
    if (from.has_mtx()) {
      set_mtx(from.mtx());
    }
    if (from.has_mty()) {
      set_mty(from.mty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxTrans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxTrans::CopyFrom(const BoxTrans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxTrans::IsInitialized() const {

  return true;
}

void BoxTrans::Swap(BoxTrans* other) {
  if (other != this) {
    std::swap(ma_, other->ma_);
    std::swap(mb_, other->mb_);
    std::swap(mc_, other->mc_);
    std::swap(md_, other->md_);
    std::swap(mtx_, other->mtx_);
    std::swap(mty_, other->mty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxTrans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxTrans_descriptor_;
  metadata.reflection = BoxTrans_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxDomFrame::kStartFrameFieldNumber;
const int BoxDomFrame::kDurationFieldNumber;
const int BoxDomFrame::kTransFieldNumber;
#endif  // !_MSC_VER

BoxDomFrame::BoxDomFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxDomFrame::InitAsDefaultInstance() {
}

BoxDomFrame::BoxDomFrame(const BoxDomFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxDomFrame::SharedCtor() {
  _cached_size_ = 0;
  startframe_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxDomFrame::~BoxDomFrame() {
  SharedDtor();
}

void BoxDomFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoxDomFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxDomFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxDomFrame_descriptor_;
}

const BoxDomFrame& BoxDomFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxFlashInfo_2eproto();
  return *default_instance_;
}

BoxDomFrame* BoxDomFrame::default_instance_ = NULL;

BoxDomFrame* BoxDomFrame::New() const {
  return new BoxDomFrame;
}

void BoxDomFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startframe_ = 0;
    duration_ = 0;
  }
  trans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxDomFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 startFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startframe_)));
          set_has_startframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_duration;
        break;
      }

      // required int32 duration = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_trans;
        break;
      }

      // repeated .BoxTrans trans = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_trans;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxDomFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 startFrame = 10;
  if (has_startframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->startframe(), output);
  }

  // required int32 duration = 20;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->duration(), output);
  }

  // repeated .BoxTrans trans = 30;
  for (int i = 0; i < this->trans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->trans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxDomFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 startFrame = 10;
  if (has_startframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->startframe(), target);
  }

  // required int32 duration = 20;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->duration(), target);
  }

  // repeated .BoxTrans trans = 30;
  for (int i = 0; i < this->trans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->trans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxDomFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 startFrame = 10;
    if (has_startframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startframe());
    }

    // required int32 duration = 20;
    if (has_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

  }
  // repeated .BoxTrans trans = 30;
  total_size += 2 * this->trans_size();
  for (int i = 0; i < this->trans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxDomFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxDomFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxDomFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxDomFrame::MergeFrom(const BoxDomFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  trans_.MergeFrom(from.trans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startframe()) {
      set_startframe(from.startframe());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxDomFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxDomFrame::CopyFrom(const BoxDomFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxDomFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BoxDomFrame::Swap(BoxDomFrame* other) {
  if (other != this) {
    std::swap(startframe_, other->startframe_);
    std::swap(duration_, other->duration_);
    trans_.Swap(&other->trans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxDomFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxDomFrame_descriptor_;
  metadata.reflection = BoxDomFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxActionInfo::kActionNameFieldNumber;
const int BoxActionInfo::kTransFieldNumber;
const int BoxActionInfo::kHurtDomFrameFieldNumber;
const int BoxActionInfo::kAttackDomFrameFieldNumber;
#endif  // !_MSC_VER

BoxActionInfo::BoxActionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxActionInfo::InitAsDefaultInstance() {
  trans_ = const_cast< ::BoxTrans*>(&::BoxTrans::default_instance());
}

BoxActionInfo::BoxActionInfo(const BoxActionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxActionInfo::SharedCtor() {
  _cached_size_ = 0;
  actionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trans_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxActionInfo::~BoxActionInfo() {
  SharedDtor();
}

void BoxActionInfo::SharedDtor() {
  if (actionname_ != &::google::protobuf::internal::kEmptyString) {
    delete actionname_;
  }
  if (this != default_instance_) {
    delete trans_;
  }
}

void BoxActionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxActionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxActionInfo_descriptor_;
}

const BoxActionInfo& BoxActionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxFlashInfo_2eproto();
  return *default_instance_;
}

BoxActionInfo* BoxActionInfo::default_instance_ = NULL;

BoxActionInfo* BoxActionInfo::New() const {
  return new BoxActionInfo;
}

void BoxActionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_actionname()) {
      if (actionname_ != &::google::protobuf::internal::kEmptyString) {
        actionname_->clear();
      }
    }
    if (has_trans()) {
      if (trans_ != NULL) trans_->::BoxTrans::Clear();
    }
  }
  hurtdomframe_.Clear();
  attackdomframe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxActionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string actionName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->actionname().data(), this->actionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hurtDomFrame;
        break;
      }

      // repeated .BoxDomFrame hurtDomFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurtDomFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hurtdomframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hurtDomFrame;
        if (input->ExpectTag(162)) goto parse_attackDomFrame;
        break;
      }

      // repeated .BoxDomFrame attackDomFrame = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackDomFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackdomframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_attackDomFrame;
        if (input->ExpectTag(242)) goto parse_trans;
        break;
      }

      // required .BoxTrans trans = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxActionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string actionName = 5;
  if (has_actionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->actionname(), output);
  }

  // repeated .BoxDomFrame hurtDomFrame = 10;
  for (int i = 0; i < this->hurtdomframe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->hurtdomframe(i), output);
  }

  // repeated .BoxDomFrame attackDomFrame = 20;
  for (int i = 0; i < this->attackdomframe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->attackdomframe(i), output);
  }

  // required .BoxTrans trans = 30;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->trans(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxActionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string actionName = 5;
  if (has_actionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actionname().data(), this->actionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->actionname(), target);
  }

  // repeated .BoxDomFrame hurtDomFrame = 10;
  for (int i = 0; i < this->hurtdomframe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->hurtdomframe(i), target);
  }

  // repeated .BoxDomFrame attackDomFrame = 20;
  for (int i = 0; i < this->attackdomframe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->attackdomframe(i), target);
  }

  // required .BoxTrans trans = 30;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->trans(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxActionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string actionName = 5;
    if (has_actionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actionname());
    }

    // required .BoxTrans trans = 30;
    if (has_trans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans());
    }

  }
  // repeated .BoxDomFrame hurtDomFrame = 10;
  total_size += 1 * this->hurtdomframe_size();
  for (int i = 0; i < this->hurtdomframe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hurtdomframe(i));
  }

  // repeated .BoxDomFrame attackDomFrame = 20;
  total_size += 2 * this->attackdomframe_size();
  for (int i = 0; i < this->attackdomframe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackdomframe(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxActionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxActionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxActionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxActionInfo::MergeFrom(const BoxActionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hurtdomframe_.MergeFrom(from.hurtdomframe_);
  attackdomframe_.MergeFrom(from.attackdomframe_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actionname()) {
      set_actionname(from.actionname());
    }
    if (from.has_trans()) {
      mutable_trans()->::BoxTrans::MergeFrom(from.trans());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxActionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxActionInfo::CopyFrom(const BoxActionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxActionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < hurtdomframe_size(); i++) {
    if (!this->hurtdomframe(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attackdomframe_size(); i++) {
    if (!this->attackdomframe(i).IsInitialized()) return false;
  }
  return true;
}

void BoxActionInfo::Swap(BoxActionInfo* other) {
  if (other != this) {
    std::swap(actionname_, other->actionname_);
    std::swap(trans_, other->trans_);
    hurtdomframe_.Swap(&other->hurtdomframe_);
    attackdomframe_.Swap(&other->attackdomframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxActionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxActionInfo_descriptor_;
  metadata.reflection = BoxActionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoxFlashInfo::kSpriteNameFieldNumber;
const int BoxFlashInfo::kActionInfoFieldNumber;
#endif  // !_MSC_VER

BoxFlashInfo::BoxFlashInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoxFlashInfo::InitAsDefaultInstance() {
}

BoxFlashInfo::BoxFlashInfo(const BoxFlashInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoxFlashInfo::SharedCtor() {
  _cached_size_ = 0;
  spritename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxFlashInfo::~BoxFlashInfo() {
  SharedDtor();
}

void BoxFlashInfo::SharedDtor() {
  if (spritename_ != &::google::protobuf::internal::kEmptyString) {
    delete spritename_;
  }
  if (this != default_instance_) {
  }
}

void BoxFlashInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoxFlashInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoxFlashInfo_descriptor_;
}

const BoxFlashInfo& BoxFlashInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BoxFlashInfo_2eproto();
  return *default_instance_;
}

BoxFlashInfo* BoxFlashInfo::default_instance_ = NULL;

BoxFlashInfo* BoxFlashInfo::New() const {
  return new BoxFlashInfo;
}

void BoxFlashInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spritename()) {
      if (spritename_ != &::google::protobuf::internal::kEmptyString) {
        spritename_->clear();
      }
    }
  }
  actioninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoxFlashInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string spriteName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spritename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spritename().data(), this->spritename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_actionInfo;
        break;
      }

      // repeated .BoxActionInfo actionInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_actionInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxFlashInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string spriteName = 5;
  if (has_spritename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spritename().data(), this->spritename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->spritename(), output);
  }

  // repeated .BoxActionInfo actionInfo = 10;
  for (int i = 0; i < this->actioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->actioninfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoxFlashInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string spriteName = 5;
  if (has_spritename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spritename().data(), this->spritename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->spritename(), target);
  }

  // repeated .BoxActionInfo actionInfo = 10;
  for (int i = 0; i < this->actioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->actioninfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoxFlashInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string spriteName = 5;
    if (has_spritename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spritename());
    }

  }
  // repeated .BoxActionInfo actionInfo = 10;
  total_size += 1 * this->actioninfo_size();
  for (int i = 0; i < this->actioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actioninfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxFlashInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoxFlashInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoxFlashInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoxFlashInfo::MergeFrom(const BoxFlashInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  actioninfo_.MergeFrom(from.actioninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spritename()) {
      set_spritename(from.spritename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoxFlashInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoxFlashInfo::CopyFrom(const BoxFlashInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxFlashInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < actioninfo_size(); i++) {
    if (!this->actioninfo(i).IsInitialized()) return false;
  }
  return true;
}

void BoxFlashInfo::Swap(BoxFlashInfo* other) {
  if (other != this) {
    std::swap(spritename_, other->spritename_);
    actioninfo_.Swap(&other->actioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoxFlashInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoxFlashInfo_descriptor_;
  metadata.reflection = BoxFlashInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
